package com.secman.dto

import com.secman.domain.VulnerabilityException.ExceptionType
import io.micronaut.serde.annotation.Serdeable
import jakarta.validation.constraints.NotBlank
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size
import java.time.LocalDateTime

/**
 * DTO for VulnerabilityException response
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */
@Serdeable
data class VulnerabilityExceptionDto(
    val id: Long?,
    val exceptionType: ExceptionType,
    val targetValue: String,
    val expirationDate: LocalDateTime?,
    val reason: String,
    val createdBy: String,
    val createdAt: LocalDateTime?,
    val updatedAt: LocalDateTime?,
    val isActive: Boolean,
    val affectedVulnerabilityCount: Int? = null  // Optional: for Exceptions list view
)

/**
 * Request DTO for creating a new VulnerabilityException
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */
@Serdeable
data class CreateVulnerabilityExceptionRequest(
    @field:NotNull
    val exceptionType: ExceptionType,

    @field:NotBlank
    @field:Size(max = 512)
    val targetValue: String,

    val expirationDate: LocalDateTime?,

    @field:NotBlank
    @field:Size(max = 1024)
    val reason: String
)

/**
 * Request DTO for updating an existing VulnerabilityException
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */
@Serdeable
data class UpdateVulnerabilityExceptionRequest(
    @field:NotNull
    val exceptionType: ExceptionType,

    @field:NotBlank
    @field:Size(max = 512)
    val targetValue: String,

    val expirationDate: LocalDateTime?,

    @field:NotBlank
    @field:Size(max = 1024)
    val reason: String
)

/**
 * DTO for Vulnerability with exception information
 *
 * Note: This DTO includes the full Asset entity for service-layer use,
 * but can also be serialized to JSON with separate fields for controller responses.
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */
@Serdeable
data class VulnerabilityWithExceptionDto(
    val id: Long?,
    val asset: com.secman.domain.Asset,  // Full asset entity for service-layer filtering
    val assetId: Long,  // Duplicate for convenience/compatibility
    val assetName: String,  // Duplicate for convenience/compatibility
    val assetIp: String?,  // Duplicate for convenience/compatibility
    val vulnerabilityId: String?,
    val cvssSeverity: String?,
    val vulnerableProductVersions: String?,
    val daysOpen: String?,
    val scanTimestamp: LocalDateTime,
    val hasException: Boolean,  // Indicates if vulnerability is covered by active exception
    val exceptionReason: String? = null  // Reason for exception (if applicable)
)
