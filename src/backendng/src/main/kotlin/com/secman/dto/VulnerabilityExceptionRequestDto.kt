package com.secman.dto

import com.secman.domain.ExceptionRequestStatus
import com.secman.domain.ExceptionScope
import io.micronaut.serde.annotation.Serdeable
import java.time.LocalDateTime

/**
 * DTO for vulnerability exception request responses.
 *
 * Used for GET endpoints returning exception request data:
 * - GET /api/vulnerability-exception-requests/{id}
 * - GET /api/vulnerability-exception-requests/my
 * - GET /api/vulnerability-exception-requests/pending
 *
 * Contains all request details including embedded vulnerability information
 * for display without additional queries.
 *
 * Feature: 031-vuln-exception-approval
 * Reference: contracts/exception-request-api.yaml lines 575-625
 */
@Serdeable
data class VulnerabilityExceptionRequestDto(
    /**
     * Unique identifier of the exception request
     */
    val id: Long,

    /**
     * ID of the vulnerability this request applies to
     */
    val vulnerabilityId: Long?,

    /**
     * CVE ID of the vulnerability (denormalized for display)
     */
    val vulnerabilityCve: String?,

    /**
     * Name of the asset with the vulnerability (denormalized for display)
     */
    val assetName: String?,

    /**
     * IP address of the asset (denormalized for display)
     */
    val assetIp: String?,

    /**
     * Username of the person who requested the exception
     */
    val requestedByUsername: String,

    /**
     * Exception scope: SINGLE_VULNERABILITY or CVE_PATTERN
     */
    val scope: ExceptionScope,

    /**
     * Business justification for the exception (50-2048 characters)
     */
    val reason: String,

    /**
     * When the exception should expire
     */
    val expirationDate: LocalDateTime,

    /**
     * Current status: PENDING, APPROVED, REJECTED, EXPIRED, CANCELLED
     */
    val status: ExceptionRequestStatus,

    /**
     * True if this request was auto-approved (requester has ADMIN/SECCHAMPION role)
     */
    val autoApproved: Boolean,

    /**
     * Username of the reviewer who approved/rejected
     * Null if not yet reviewed
     */
    val reviewedByUsername: String?,

    /**
     * When the request was reviewed (approved or rejected)
     * Null if not yet reviewed
     */
    val reviewDate: LocalDateTime?,

    /**
     * Reviewer's comment/justification
     * Optional for approval, required for rejection
     * Null if not reviewed or no comment provided
     */
    val reviewComment: String?,

    /**
     * When the request was created
     */
    val createdAt: LocalDateTime,

    /**
     * When the request was last updated
     */
    val updatedAt: LocalDateTime
)
