package com.secman.repository

import com.secman.domain.VulnerabilityException
import com.secman.domain.VulnerabilityException.ExceptionType
import io.micronaut.data.annotation.Repository
import io.micronaut.data.jpa.repository.JpaRepository
import java.time.LocalDateTime

/**
 * Repository for VulnerabilityException entity operations
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */
@Repository
interface VulnerabilityExceptionRepository : JpaRepository<VulnerabilityException, Long> {

    /**
     * Find all active exceptions (not expired)
     * Used for checking if vulnerabilities are excepted
     *
     * @param date The current date/time to compare against expiration
     * @return List of active exceptions
     */
    fun findByExpirationDateIsNullOrExpirationDateGreaterThan(date: LocalDateTime): List<VulnerabilityException>

    /**
     * Find exceptions by type (IP or PRODUCT)
     *
     * @param type The exception type to filter by
     * @return List of exceptions matching the type
     */
    fun findByExceptionType(type: ExceptionType): List<VulnerabilityException>

    /**
     * Find exceptions created by a specific user
     *
     * @param username The username who created the exceptions
     * @return List of exceptions created by the user
     */
    fun findByCreatedBy(username: String): List<VulnerabilityException>

    /**
     * Find exceptions by type and asset ID.
     *
     * Used by expiration scheduler to find ASSET-type exceptions for deactivation.
     *
     * @param type Exception type (typically ASSET)
     * @param assetId Asset ID to match
     * @return List of exceptions matching criteria
     */
    fun findByExceptionTypeAndAssetId(
        type: ExceptionType,
        assetId: Long
    ): List<VulnerabilityException>

    /**
     * Find exceptions by type and target value.
     *
     * Used by expiration scheduler to find PRODUCT-type exceptions for deactivation.
     * Target value typically contains CVE ID for PRODUCT-type exceptions.
     *
     * @param type Exception type (typically PRODUCT)
     * @param targetValue Target value to match (e.g., CVE ID)
     * @return List of exceptions matching criteria
     */
    fun findByExceptionTypeAndTargetValue(
        type: ExceptionType,
        targetValue: String
    ): List<VulnerabilityException>
}
