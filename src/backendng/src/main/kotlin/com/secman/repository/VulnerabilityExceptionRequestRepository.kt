package com.secman.repository

import com.secman.domain.ExceptionRequestStatus
import com.secman.domain.VulnerabilityExceptionRequest
import io.micronaut.data.annotation.Repository
import io.micronaut.data.jpa.repository.JpaRepository
import io.micronaut.data.model.Page
import io.micronaut.data.model.Pageable
import java.time.LocalDateTime

/**
 * Repository for VulnerabilityExceptionRequest entity operations.
 *
 * Provides query methods for exception request management:
 * - Find requests by user (requester or reviewer)
 * - Find requests by status (pending, approved, rejected, etc.)
 * - Find requests by vulnerability
 * - Count requests by status
 * - Support pagination for large result sets
 *
 * Related to: Feature 031-vuln-exception-approval
 */
@Repository
interface VulnerabilityExceptionRequestRepository : JpaRepository<VulnerabilityExceptionRequest, Long> {

    /**
     * Find all exception requests created by a specific user
     *
     * @param userId ID of the requesting user
     * @param pageable Pagination parameters (page number, size, sort)
     * @return Paginated list of requests
     */
    fun findByRequestedByUserId(userId: Long, pageable: Pageable): Page<VulnerabilityExceptionRequest>

    /**
     * Find exception requests by requesting user and status
     *
     * @param userId ID of the requesting user
     * @param status Status to filter by (PENDING, APPROVED, etc.)
     * @param pageable Pagination parameters
     * @return Paginated list of requests matching criteria
     */
    fun findByRequestedByUserIdAndStatus(
        userId: Long,
        status: ExceptionRequestStatus,
        pageable: Pageable
    ): Page<VulnerabilityExceptionRequest>

    /**
     * Find all exception requests with a specific status
     *
     * @param status Status to filter by
     * @param pageable Pagination parameters (for approval dashboard)
     * @return Paginated list of requests
     */
    fun findByStatus(status: ExceptionRequestStatus, pageable: Pageable): Page<VulnerabilityExceptionRequest>

    /**
     * Find exception request by vulnerability ID
     * Used to check for existing requests before allowing new request
     *
     * @param vulnerabilityId ID of the vulnerability
     * @return List of requests for this vulnerability
     */
    fun findByVulnerabilityId(vulnerabilityId: Long): List<VulnerabilityExceptionRequest>

    /**
     * Find active requests for a vulnerability (PENDING or APPROVED)
     * Used for duplicate prevention (FR-033)
     *
     * @param vulnerabilityId ID of the vulnerability
     * @param statuses List of active statuses (PENDING, APPROVED)
     * @return List of active requests
     */
    fun findByVulnerabilityIdAndStatusIn(
        vulnerabilityId: Long,
        statuses: List<ExceptionRequestStatus>
    ): List<VulnerabilityExceptionRequest>

    /**
     * Count exception requests by status
     * Used for summary statistics and badge counts
     *
     * @param status Status to count
     * @return Count of requests with this status
     */
    fun countByStatus(status: ExceptionRequestStatus): Long

    /**
     * Count exception requests by requesting user
     * Used for user dashboard statistics
     *
     * @param userId ID of the requesting user
     * @return Count of user's requests
     */
    fun countByRequestedByUserId(userId: Long): Long

    /**
     * Count exception requests by requesting user and status
     * Used for user dashboard status breakdown
     *
     * @param userId ID of the requesting user
     * @param status Status to count
     * @return Count of user's requests with this status
     */
    fun countByRequestedByUserIdAndStatus(userId: Long, status: ExceptionRequestStatus): Long

    /**
     * Find all exception requests with status and created after date
     * Used for time-based statistics (e.g., last 30 days)
     *
     * @param status Status to filter by
     * @param createdAfter Minimum creation date
     * @return List of requests matching criteria
     */
    fun findByStatusAndCreatedAtAfter(
        status: ExceptionRequestStatus,
        createdAfter: LocalDateTime
    ): List<VulnerabilityExceptionRequest>

    /**
     * Find all APPROVED requests past their expiration date
     * Used by daily scheduled job to mark exceptions as EXPIRED
     *
     * @param status Must be APPROVED
     * @param expirationBefore Maximum expiration date (typically current time)
     * @return List of expired requests needing status update
     */
    fun findByStatusAndExpirationDateBefore(
        status: ExceptionRequestStatus,
        expirationBefore: LocalDateTime
    ): List<VulnerabilityExceptionRequest>

    /**
     * Find requests by status with expiration date less than or equal to the given date.
     *
     * Used by expiration scheduler to find requests that have expired.
     *
     * @param status Request status filter
     * @param expirationDate Maximum expiration date (inclusive)
     * @return List of requests matching criteria
     */
    fun findByStatusAndExpirationDateLessThanEqual(
        status: ExceptionRequestStatus,
        expirationDate: LocalDateTime
    ): List<VulnerabilityExceptionRequest>

    /**
     * Find requests by status with expiration date in a date range.
     *
     * Used by expiration reminder scheduler to find requests expiring soon.
     *
     * @param status Request status filter
     * @param startDate Start of date range (inclusive)
     * @param endDate End of date range (inclusive)
     * @return List of requests matching criteria
     */
    fun findByStatusAndExpirationDateBetween(
        status: ExceptionRequestStatus,
        startDate: LocalDateTime,
        endDate: LocalDateTime
    ): List<VulnerabilityExceptionRequest>

    /**
     * Find all requests created after a certain date.
     *
     * Used by statistics service for date range filtering.
     *
     * @param createdAfter Minimum creation date (exclusive)
     * @return List of requests created after the date
     */
    fun findByCreatedAtAfter(createdAfter: LocalDateTime): List<VulnerabilityExceptionRequest>

    /**
     * Count exception requests by status and created after date.
     *
     * Used by statistics service for time-based metrics (e.g., approval rate last 30 days).
     *
     * @param status Status to filter by
     * @param createdAfter Minimum creation date (exclusive)
     * @return Count of requests matching criteria
     */
    fun countByStatusAndCreatedAtAfter(
        status: ExceptionRequestStatus,
        createdAfter: LocalDateTime
    ): Long
}
