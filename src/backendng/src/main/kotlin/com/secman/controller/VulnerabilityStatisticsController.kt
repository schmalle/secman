package com.secman.controller

import com.secman.dto.MostCommonVulnerabilityDto
import com.secman.service.VulnerabilityStatisticsService
import io.micronaut.http.HttpResponse
import io.micronaut.http.HttpStatus
import io.micronaut.http.MediaType
import io.micronaut.http.annotation.Controller
import io.micronaut.http.annotation.Get
import io.micronaut.http.annotation.Produces
import io.micronaut.http.annotation.QueryValue
import io.micronaut.security.annotation.Secured
import io.micronaut.security.authentication.Authentication
import io.micronaut.security.rules.SecurityRule

/**
 * REST API controller for vulnerability statistics
 *
 * Provides endpoints for aggregated vulnerability analytics:
 * - Most common vulnerabilities
 * - Severity distribution
 * - Top assets by vulnerability count
 * - Vulnerabilities by asset type
 * - Temporal trends
 *
 * Access Control: All endpoints require authentication (ADMIN or VULN role)
 * Statistics are filtered by workgroup for non-ADMIN users
 *
 * Feature: 036-vuln-stats-lense
 * Task: T005
 * Spec reference: spec.md Section "API Endpoints"
 * Contract: contracts/vulnerability-statistics-api.yaml
 */
@Controller("/api/vulnerability-statistics")
@Secured(SecurityRule.IS_AUTHENTICATED)
class VulnerabilityStatisticsController(
    private val vulnerabilityStatisticsService: VulnerabilityStatisticsService
) {

    /**
     * GET /api/vulnerability-statistics/most-common
     *
     * Returns top 10 most frequently occurring vulnerabilities across accessible assets.
     * Respects workgroup-based access control.
     *
     * Feature: 036-vuln-stats-lense
     * Task: T014 [US1]
     * Spec reference: spec.md FR-001, FR-002
     * User Story: US1 - View Most Common Vulnerabilities (P1)
     * Contract: contracts/vulnerability-statistics-api.yaml /most-common
     *
     * @param authentication Current user authentication context (injected by Micronaut Security)
     * @return HTTP 200 with list of most common vulnerabilities, or HTTP 500 on error
     */
    @Get("/most-common")
    @Produces(MediaType.APPLICATION_JSON)
    fun getMostCommonVulnerabilities(authentication: Authentication): HttpResponse<List<MostCommonVulnerabilityDto>> {
        return try {
            val result = vulnerabilityStatisticsService.getMostCommonVulnerabilities(authentication)
            HttpResponse.ok(result)
        } catch (e: Exception) {
            // Log error (in production, use proper logging framework)
            println("Error fetching most common vulnerabilities: ${e.message}")
            HttpResponse.serverError()
        }
    }

    /**
     * GET /api/vulnerability-statistics/severity-distribution
     *
     * Returns vulnerability counts grouped by CVSS severity level (CRITICAL, HIGH, MEDIUM, LOW, UNKNOWN).
     * Includes computed percentage properties for visualization in pie charts.
     * Respects workgroup-based access control.
     *
     * Feature: 036-vuln-stats-lense
     * Task: T024 [US2]
     * Spec reference: spec.md FR-003, FR-004
     * User Story: US2 - View Severity Distribution (P2)
     * Contract: contracts/vulnerability-statistics-api.yaml /severity-distribution
     *
     * @param authentication Current user authentication context (injected by Micronaut Security)
     * @return HTTP 200 with severity distribution DTO, or HTTP 500 on error
     */
    @Get("/severity-distribution")
    @Produces(MediaType.APPLICATION_JSON)
    fun getSeverityDistribution(authentication: Authentication): HttpResponse<com.secman.dto.SeverityDistributionDto> {
        return try {
            val result = vulnerabilityStatisticsService.getSeverityDistribution(authentication)
            HttpResponse.ok(result)
        } catch (e: Exception) {
            // Log error (in production, use proper logging framework)
            println("Error fetching severity distribution: ${e.message}")
            HttpResponse.serverError()
        }
    }

    /**
     * GET /api/vulnerability-statistics/top-assets
     *
     * Returns top 10 assets ranked by total vulnerability count with severity breakdowns.
     * Useful for identifying which assets require the most urgent remediation attention.
     * Respects workgroup-based access control.
     *
     * Feature: 036-vuln-stats-lense
     * Task: T034 [US3]
     * Spec reference: spec.md FR-005, FR-006
     * User Story: US3 - View Asset Vulnerability Statistics (P3)
     * Contract: contracts/vulnerability-statistics-api.yaml /top-assets
     *
     * @param authentication Current user authentication context (injected by Micronaut Security)
     * @return HTTP 200 with list of top assets, or HTTP 500 on error
     */
    @Get("/top-assets")
    @Produces(MediaType.APPLICATION_JSON)
    fun getTopAssetsByVulnerabilities(authentication: Authentication): HttpResponse<List<com.secman.dto.TopAssetByVulnerabilitiesDto>> {
        return try {
            val result = vulnerabilityStatisticsService.getTopAssetsByVulnerabilities(authentication)
            HttpResponse.ok(result)
        } catch (e: Exception) {
            // Log error (in production, use proper logging framework)
            println("Error fetching top assets by vulnerabilities: ${e.message}")
            HttpResponse.serverError()
        }
    }

    /**
     * GET /api/vulnerability-statistics/by-asset-type
     *
     * Returns vulnerability statistics grouped by asset type (Server, Workstation, Network Device, etc.).
     * Includes severity breakdowns and average vulnerabilities per asset for each type.
     * Useful for identifying systemic vulnerability patterns across infrastructure categories.
     * Respects workgroup-based access control.
     *
     * Feature: 036-vuln-stats-lense
     * Task: T038 [US3]
     * Spec reference: spec.md FR-007, FR-008
     * User Story: US3 - View Asset Vulnerability Statistics (P3)
     * Contract: contracts/vulnerability-statistics-api.yaml /by-asset-type
     *
     * @param authentication Current user authentication context (injected by Micronaut Security)
     * @return HTTP 200 with list of asset type statistics, or HTTP 500 on error
     */
    @Get("/by-asset-type")
    @Produces(MediaType.APPLICATION_JSON)
    fun getVulnerabilitiesByAssetType(authentication: Authentication): HttpResponse<List<com.secman.dto.VulnerabilityByAssetTypeDto>> {
        return try {
            val result = vulnerabilityStatisticsService.getVulnerabilitiesByAssetType(authentication)
            HttpResponse.ok(result)
        } catch (e: Exception) {
            // Log error (in production, use proper logging framework)
            println("Error fetching vulnerabilities by asset type: ${e.message}")
            HttpResponse.serverError()
        }
    }

    /**
     * GET /api/vulnerability-statistics/temporal-trends
     *
     * Returns time-series vulnerability data showing daily counts over specified period (30, 60, or 90 days).
     * Includes severity breakdowns for trend visualization in line charts.
     * Respects workgroup-based access control.
     *
     * Feature: 036-vuln-stats-lense
     * Task: T050 [US4]
     * Spec reference: spec.md FR-009, FR-010, FR-011
     * User Story: US4 - View Temporal Trends (P4)
     * Contract: contracts/vulnerability-statistics-api.yaml /temporal-trends
     *
     * @param authentication Current user authentication context (injected by Micronaut Security)
     * @param days Number of days to analyze (must be 30, 60, or 90)
     * @return HTTP 200 with temporal trends DTO, HTTP 400 for invalid days parameter, or HTTP 500 on error
     */
    @Get("/temporal-trends")
    @Produces(MediaType.APPLICATION_JSON)
    fun getTemporalTrends(
        authentication: Authentication,
        @QueryValue(defaultValue = "30") days: Int
    ): HttpResponse<*> {
        return try {
            // Validate days parameter
            if (days !in listOf(30, 60, 90)) {
                return HttpResponse.status<String>(HttpStatus.BAD_REQUEST)
                    .body("Days parameter must be 30, 60, or 90")
            }

            val result = vulnerabilityStatisticsService.getTemporalTrends(authentication, days)
            HttpResponse.ok(result)
        } catch (e: IllegalArgumentException) {
            HttpResponse.status<String>(HttpStatus.BAD_REQUEST).body(e.message)
        } catch (e: Exception) {
            // Log error (in production, use proper logging framework)
            println("Error fetching temporal trends: ${e.message}")
            HttpResponse.serverError<String>()
        }
    }
}
