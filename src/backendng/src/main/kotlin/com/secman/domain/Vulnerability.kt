package com.secman.domain

import com.fasterxml.jackson.annotation.JsonIgnore
import io.micronaut.serde.annotation.Serdeable
import jakarta.persistence.*
import jakarta.validation.constraints.NotNull
import java.time.LocalDateTime

/**
 * Vulnerability entity representing a security vulnerability discovered during a scan.
 *
 * Linked to an Asset entity via ManyToOne relationship.
 * Supports historical tracking - duplicate vulnerabilities (same CVE on same asset)
 * are kept as separate records differentiated by scanTimestamp.
 *
 * Related to: Feature 003-i-want-to (Vulnerability Management System)
 *
 * @property id Unique identifier
 * @property asset Asset this vulnerability affects (required)
 * @property vulnerabilityId CVE or vulnerability identifier (e.g., "CVE-2016-2183")
 * @property cvssSeverity CVSS severity level (e.g., "High", "Critical", "Medium", "Low", "Informational")
 * @property vulnerableProductVersions Affected product/version information
 * @property daysOpen Text representation of days open (e.g., "58 days")
 * @property scanTimestamp When the scan was performed (user-specified, required)
 * @property createdAt When the record was imported into the system (auto-generated)
 */
@Entity
@Table(
    name = "vulnerability",
    indexes = [
        Index(name = "idx_vulnerability_asset", columnList = "asset_id"),
        Index(name = "idx_vulnerability_asset_scan", columnList = "asset_id,scan_timestamp")
    ]
)
@Serdeable
data class Vulnerability(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long? = null,

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "asset_id", nullable = false)
    @JsonIgnore // Prevent lazy loading errors during JSON serialization
    @NotNull
    var asset: Asset,

    @Column(name = "vulnerability_id", length = 255)
    var vulnerabilityId: String? = null,

    @Column(name = "cvss_severity", length = 50)
    var cvssSeverity: String? = null,

    @Column(name = "vulnerable_product_versions", length = 512)
    var vulnerableProductVersions: String? = null,

    @Column(name = "days_open", length = 50)
    var daysOpen: String? = null,

    @Column(name = "scan_timestamp", nullable = false)
    @NotNull
    var scanTimestamp: LocalDateTime,

    @Column(name = "created_at", updatable = false)
    var createdAt: LocalDateTime? = null
) {
    @PrePersist
    fun onCreate() {
        createdAt = LocalDateTime.now()
    }

    override fun toString(): String {
        return "Vulnerability(id=$id, vulnerabilityId='$vulnerabilityId', " +
                "cvssSeverity='$cvssSeverity', scanTimestamp=$scanTimestamp)"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Vulnerability) return false
        return id != null && id == other.id
    }

    override fun hashCode(): Int {
        return id?.hashCode() ?: 0
    }
}
