package com.secman.domain

import io.micronaut.serde.annotation.Serdeable
import jakarta.persistence.*
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import org.hibernate.annotations.CreationTimestamp
import org.hibernate.annotations.UpdateTimestamp
import java.time.LocalDateTime

/**
 * VulnerabilityConfig entity representing global vulnerability management settings.
 *
 * This is a singleton entity (only one record exists in the database).
 * Stores configuration for vulnerability overdue tracking and remediation SLAs.
 *
 * Related to: Feature 021-vulnerability-overdue-exception-logic
 *
 * @property id Unique identifier (always 1 in practice)
 * @property reminderOneDays Days threshold after which vulnerabilities are considered overdue
 * @property updatedBy Username of last person who updated the configuration
 * @property createdAt When the configuration was first created (auto-generated)
 * @property updatedAt When the configuration was last updated (auto-updated)
 */
@Entity
@Table(name = "vulnerability_config")
@Serdeable
data class VulnerabilityConfig(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long? = null,
    
    /**
     * "Reminder One" threshold in days.
     * Vulnerabilities older than this are considered overdue (if not excepted).
     * Default: 30 days
     * Valid range: 1-365 days
     */
    @Column(name = "reminder_one_days", nullable = false)
    @Min(1)
    @Max(365)
    var reminderOneDays: Int = 30,
    
    /**
     * Username of the administrator who last updated this configuration
     */
    @Column(name = "updated_by", length = 255)
    var updatedBy: String? = null,
    
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    val createdAt: LocalDateTime? = null,
    
    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    var updatedAt: LocalDateTime? = null
) {
    override fun toString(): String {
        return "VulnerabilityConfig(id=$id, reminderOneDays=$reminderOneDays, updatedBy='$updatedBy')"
    }
    
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is VulnerabilityConfig) return false
        return id != null && id == other.id
    }
    
    override fun hashCode(): Int {
        return id?.hashCode() ?: 0
    }
}
