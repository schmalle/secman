package com.secman.service

import com.secman.domain.VulnerabilityConfig
import com.secman.dto.VulnerabilityConfigDto
import com.secman.repository.VulnerabilityConfigRepository
import jakarta.inject.Singleton
import jakarta.transaction.Transactional
import org.slf4j.LoggerFactory

/**
 * Service for managing vulnerability configuration.
 *
 * Implements singleton pattern for vulnerability configuration:
 * - Automatically creates default configuration if none exists
 * - Only one configuration record exists in the database
 * - Provides thread-safe access to configuration
 *
 * Related to: Feature 021-vulnerability-overdue-exception-logic
 */
@Singleton
open class VulnerabilityConfigService(
    private val configRepository: VulnerabilityConfigRepository
) {
    private val log = LoggerFactory.getLogger(VulnerabilityConfigService::class.java)
    
    /**
     * Get the current vulnerability configuration.
     * If no configuration exists, creates one with default values.
     *
     * @return Current configuration as DTO
     */
    @Transactional
    open fun getConfig(): VulnerabilityConfigDto {
        log.debug("Fetching vulnerability configuration")
        val config = configRepository.findFirstConfig() 
            ?: createDefaultConfig()
        return mapToDto(config)
    }
    
    /**
     * Update the vulnerability configuration.
     * Creates configuration if it doesn't exist.
     *
     * @param reminderOneDays New threshold value (1-365 days)
     * @param username Username of the administrator making the change
     * @return Updated configuration as DTO
     * @throws IllegalArgumentException if reminderOneDays is out of range
     */
    @Transactional
    open fun updateConfig(reminderOneDays: Int, username: String): VulnerabilityConfigDto {
        require(reminderOneDays in 1..365) {
            "Reminder One must be between 1 and 365 days"
        }
        
        log.info("Updating vulnerability config - reminderOne: {} days by {}", reminderOneDays, username)
        
        val config = configRepository.findFirstConfig() 
            ?: createDefaultConfig()
        
        config.reminderOneDays = reminderOneDays
        config.updatedBy = username
        
        val updated = configRepository.update(config)
        log.info("Vulnerability config updated successfully - new threshold: {} days", reminderOneDays)
        
        return mapToDto(updated)
    }
    
    /**
     * Get just the reminder one days value.
     * Efficient method for services that only need the threshold value.
     * Returns default value (30) if no configuration exists.
     *
     * @return Reminder One threshold in days
     */
    fun getReminderOneDays(): Int {
        return configRepository.findFirstConfig()?.reminderOneDays ?: 30
    }
    
    /**
     * Create default configuration with 30-day threshold.
     * This is called automatically if no configuration exists.
     *
     * @return Newly created configuration
     */
    private fun createDefaultConfig(): VulnerabilityConfig {
        log.info("No vulnerability configuration found - creating default (30 days)")
        val config = VulnerabilityConfig(reminderOneDays = 30)
        return configRepository.save(config)
    }
    
    /**
     * Map VulnerabilityConfig entity to DTO.
     *
     * @param config Entity to map
     * @return DTO representation
     */
    private fun mapToDto(config: VulnerabilityConfig) = VulnerabilityConfigDto(
        id = config.id,
        reminderOneDays = config.reminderOneDays,
        updatedBy = config.updatedBy,
        updatedAt = config.updatedAt
    )
}
