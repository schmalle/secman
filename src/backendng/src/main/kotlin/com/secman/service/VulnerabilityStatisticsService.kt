package com.secman.service

import com.secman.repository.VulnerabilityRepository
import io.micronaut.security.authentication.Authentication
import jakarta.inject.Singleton
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime

/**
 * Service for vulnerability statistics with workgroup-based access control
 *
 * Responsibilities:
 * - Provide aggregated vulnerability statistics (most common, severity distribution, etc.)
 * - Apply workgroup-based access control (ADMIN sees all, VULN sees assigned workgroups only)
 * - Support multiple statistical views: by vulnerability, by severity, by asset, by time
 *
 * Feature: 036-vuln-stats-lense
 * Task: T004
 * User Stories: US1-US4 (All statistics user stories)
 * Spec reference: spec.md FR-001 through FR-015
 */
@Singleton
class VulnerabilityStatisticsService(
    private val vulnerabilityRepository: VulnerabilityRepository
) {

    /**
     * Extract workgroup IDs from authentication context
     *
     * Workgroup IDs are stored as a comma-separated string in authentication attributes
     * under the key "workgroupIds". This is populated during authentication.
     *
     * @param authentication Current user authentication context
     * @return List of workgroup IDs, or null if not present (ADMIN users may not have this)
     */
    private fun extractWorkgroupIds(authentication: Authentication): List<Long>? {
        val workgroupIdsStr = authentication.attributes["workgroupIds"] as? String
        return workgroupIdsStr?.split(",")?.mapNotNull { it.toLongOrNull() }
    }

    /**
     * Check if user has ADMIN role
     *
     * ADMIN users bypass workgroup filtering and see all statistics
     *
     * @param authentication Current user authentication context
     * @return true if user has ADMIN role, false otherwise
     */
    private fun isAdmin(authentication: Authentication): Boolean {
        return authentication.roles.contains("ADMIN")
    }

    /**
     * Get most common vulnerabilities with workgroup-based access control
     *
     * Returns top 10 vulnerabilities ranked by occurrence frequency across accessible assets.
     * Access control:
     * - ADMIN role: sees all vulnerabilities (no filtering)
     * - VULN role: sees only vulnerabilities on assets in assigned workgroups
     *
     * Feature: 036-vuln-stats-lense
     * Task: T013 [US1]
     * Spec reference: spec.md FR-001, FR-002, FR-006
     * User Story: US1 - View Most Common Vulnerabilities (P1)
     *
     * @param authentication Current user authentication context
     * @return List of most common vulnerabilities (max 10) with occurrence counts
     */
    fun getMostCommonVulnerabilities(authentication: Authentication): List<com.secman.dto.MostCommonVulnerabilityDto> {
        val rawResults = if (isAdmin(authentication)) {
            // ADMIN sees all vulnerabilities
            vulnerabilityRepository.findMostCommonVulnerabilitiesForAll()
        } else {
            // VULN user sees only vulnerabilities from assigned workgroups
            val workgroupIds = extractWorkgroupIds(authentication)
            if (workgroupIds.isNullOrEmpty()) {
                // User has no workgroup assignments - return empty list
                return emptyList()
            } else {
                vulnerabilityRepository.findMostCommonVulnerabilitiesForWorkgroups(workgroupIds.toSet())
            }
        }

        // Transform raw results into DTOs
        return rawResults.map { row ->
            com.secman.dto.MostCommonVulnerabilityDto(
                vulnerabilityId = row["vulnerabilityId"] as? String ?: "",
                cvssSeverity = row["cvssSeverity"] as? String ?: "UNKNOWN",
                occurrenceCount = (row["occurrenceCount"] as? Number)?.toLong() ?: 0L,
                affectedAssetCount = (row["affectedAssetCount"] as? Number)?.toLong() ?: 0L
            )
        }
    }

    /**
     * Get severity distribution with workgroup-based access control
     *
     * Returns vulnerability counts grouped by CVSS severity level (CRITICAL, HIGH, MEDIUM, LOW, UNKNOWN).
     * Includes computed percentage properties for each severity level.
     * Access control:
     * - ADMIN role: sees all vulnerabilities (no filtering)
     * - VULN role: sees only vulnerabilities on assets in assigned workgroups
     *
     * Feature: 036-vuln-stats-lense
     * Task: T023 [US2]
     * Spec reference: spec.md FR-003, FR-004, FR-006
     * User Story: US2 - View Severity Distribution (P2)
     *
     * @param authentication Current user authentication context
     * @return SeverityDistributionDto with counts and percentages for each severity level
     */
    fun getSeverityDistribution(authentication: Authentication): com.secman.dto.SeverityDistributionDto {
        // Get raw severity counts from repository
        val rawResults = if (isAdmin(authentication)) {
            vulnerabilityRepository.findSeverityDistributionForAll()
        } else {
            val workgroupIds = extractWorkgroupIds(authentication)
            if (workgroupIds.isNullOrEmpty()) {
                // User has no workgroup assignments - return empty results
                emptyList()
            } else {
                vulnerabilityRepository.findSeverityDistributionForWorkgroups(workgroupIds.toSet())
            }
        }

        // Aggregate results into severity counts
        var criticalCount = 0L
        var highCount = 0L
        var mediumCount = 0L
        var lowCount = 0L
        var unknownCount = 0L

        rawResults.forEach { row ->
            val severity = row["severity"] as? String ?: "UNKNOWN"
            val count = (row["count"] as? Number)?.toLong() ?: 0L

            when (severity.uppercase()) {
                "CRITICAL" -> criticalCount = count
                "HIGH" -> highCount = count
                "MEDIUM" -> mediumCount = count
                "LOW" -> lowCount = count
                "UNKNOWN" -> unknownCount = count
            }
        }

        return com.secman.dto.SeverityDistributionDto(
            critical = criticalCount,
            high = highCount,
            medium = mediumCount,
            low = lowCount,
            unknown = unknownCount
        )
    }

    /**
     * Get top assets ranked by vulnerability count with workgroup-based access control
     *
     * Returns top 10 assets ranked by total vulnerability count with severity breakdowns.
     * Access control:
     * - ADMIN role: sees all assets (no filtering)
     * - VULN role: sees only assets in assigned workgroups
     *
     * Feature: 036-vuln-stats-lense
     * Task: T033 [US3]
     * Spec reference: spec.md FR-005, FR-006
     * User Story: US3 - View Asset Vulnerability Statistics (P3)
     *
     * @param authentication Current user authentication context
     * @return List of top 10 assets with vulnerability counts and severity breakdowns
     */
    fun getTopAssetsByVulnerabilities(authentication: Authentication): List<com.secman.dto.TopAssetByVulnerabilitiesDto> {
        val rawResults = if (isAdmin(authentication)) {
            // ADMIN sees all assets
            vulnerabilityRepository.findTopAssetsByVulnerabilitiesForAll()
        } else {
            // VULN user sees only assets from assigned workgroups
            val workgroupIds = extractWorkgroupIds(authentication)
            if (workgroupIds.isNullOrEmpty()) {
                // User has no workgroup assignments - return empty list
                return emptyList()
            } else {
                vulnerabilityRepository.findTopAssetsByVulnerabilitiesForWorkgroups(workgroupIds.toSet())
            }
        }

        // Transform raw results into DTOs
        return rawResults.map { row ->
            com.secman.dto.TopAssetByVulnerabilitiesDto(
                assetId = (row["assetId"] as? Number)?.toLong() ?: 0L,
                assetName = row["assetName"] as? String ?: "",
                assetType = row["assetType"] as? String,
                assetIp = row["assetIp"] as? String,
                totalVulnerabilityCount = (row["totalVulnerabilityCount"] as? Number)?.toLong() ?: 0L,
                criticalCount = (row["criticalCount"] as? Number)?.toLong() ?: 0L,
                highCount = (row["highCount"] as? Number)?.toLong() ?: 0L,
                mediumCount = (row["mediumCount"] as? Number)?.toLong() ?: 0L,
                lowCount = (row["lowCount"] as? Number)?.toLong() ?: 0L
            )
        }
    }

    /**
     * Get vulnerability statistics grouped by asset type with workgroup-based access control
     *
     * Returns vulnerability counts aggregated by asset type (Server, Workstation, etc.) with
     * severity breakdowns and average vulnerabilities per asset.
     * Access control:
     * - ADMIN role: sees all asset types (no filtering)
     * - VULN role: sees only asset types from assigned workgroups
     *
     * Feature: 036-vuln-stats-lense
     * Task: T037 [US3]
     * Spec reference: spec.md FR-007, FR-008
     * User Story: US3 - View Asset Vulnerability Statistics (P3)
     *
     * @param authentication Current user authentication context
     * @return List of asset types with vulnerability statistics
     */
    fun getVulnerabilitiesByAssetType(authentication: Authentication): List<com.secman.dto.VulnerabilityByAssetTypeDto> {
        // Get raw results from repository
        val rawResults = if (isAdmin(authentication)) {
            vulnerabilityRepository.findVulnerabilitiesByAssetTypeForAll()
        } else {
            val workgroupIds = extractWorkgroupIds(authentication)
            if (workgroupIds.isNullOrEmpty()) {
                // User has no workgroup assignments - return empty results
                return emptyList()
            } else {
                vulnerabilityRepository.findVulnerabilitiesByAssetTypeForWorkgroups(workgroupIds.toSet())
            }
        }

        // Transform raw results into DTOs
        return rawResults.map { row ->
            com.secman.dto.VulnerabilityByAssetTypeDto(
                assetType = row["assetType"] as String,
                assetCount = (row["assetCount"] as? Number)?.toLong() ?: 0L,
                totalVulnerabilityCount = (row["totalVulnerabilityCount"] as? Number)?.toLong() ?: 0L,
                criticalCount = (row["criticalCount"] as? Number)?.toLong() ?: 0L,
                highCount = (row["highCount"] as? Number)?.toLong() ?: 0L,
                mediumCount = (row["mediumCount"] as? Number)?.toLong() ?: 0L,
                lowCount = (row["lowCount"] as? Number)?.toLong() ?: 0L,
                averageVulnerabilitiesPerAsset = (row["avgVulnsPerAsset"] as? Number)?.toDouble() ?: 0.0
            )
        }
    }

    /**
     * Get temporal vulnerability trends with workgroup-based access control
     *
     * Returns time-series data showing vulnerability counts over specified time period (30, 60, or 90 days).
     * Access control:
     * - ADMIN role: sees all vulnerabilities (no filtering)
     * - VULN role: sees only vulnerabilities from assigned workgroups
     *
     * Feature: 036-vuln-stats-lense
     * Task: T049 [US4]
     * Spec reference: spec.md FR-009, FR-010, FR-011
     * User Story: US4 - View Temporal Trends (P4)
     *
     * @param authentication Current user authentication context
     * @param days Number of days to analyze (30, 60, or 90)
     * @return TemporalTrendsDto with daily data points
     * @throws IllegalArgumentException if days is not 30, 60, or 90
     */
    fun getTemporalTrends(authentication: Authentication, days: Int): com.secman.dto.TemporalTrendsDto {
        // Validate days parameter
        if (days !in listOf(30, 60, 90)) {
            throw IllegalArgumentException("Days parameter must be 30, 60, or 90")
        }

        // Calculate date range
        val endDate = LocalDate.now()
        val startDate = endDate.minusDays(days.toLong())
        val startDateTime = LocalDateTime.of(startDate, LocalTime.MIN)

        // Get raw results from repository
        val rawResults = if (isAdmin(authentication)) {
            vulnerabilityRepository.findTemporalTrendsForAll(startDateTime)
        } else {
            val workgroupIds = extractWorkgroupIds(authentication)
            if (workgroupIds.isNullOrEmpty()) {
                // User has no workgroup assignments - return empty results
                emptyList()
            } else {
                vulnerabilityRepository.findTemporalTrendsForWorkgroups(workgroupIds.toSet(), startDateTime)
            }
        }

        // Transform raw results into data points
        val dataPoints = rawResults.map { row ->
            com.secman.dto.TemporalTrendDataPointDto(
                date = (row["date"] as java.sql.Date).toLocalDate(),
                totalCount = (row["totalCount"] as? Number)?.toLong() ?: 0L,
                criticalCount = (row["criticalCount"] as? Number)?.toLong() ?: 0L,
                highCount = (row["highCount"] as? Number)?.toLong() ?: 0L,
                mediumCount = (row["mediumCount"] as? Number)?.toLong() ?: 0L,
                lowCount = (row["lowCount"] as? Number)?.toLong() ?: 0L
            )
        }

        return com.secman.dto.TemporalTrendsDto(
            startDate = startDate,
            endDate = endDate,
            days = days,
            dataPoints = dataPoints
        )
    }
}
