package com.secman.crowdstrike.unit

import com.secman.crowdstrike.model.Severity
import com.secman.crowdstrike.model.Vulnerability
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import java.time.LocalDate
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

/**
 * Unit tests for Vulnerability domain model
 *
 * Tests CVE ID validation, CVSS score validation, and utility methods
 * Related to: Feature 023-create-in-the
 * Task: T042
 */
class VulnerabilityTest {

    /**
     * Test: Valid vulnerability creation
     */
    @Test
    fun `Vulnerability should accept valid CVE ID`() {
        // Arrange & Act
        val vuln = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "OpenSSL",
            description = "Critical vulnerability in OpenSSL"
        )

        // Assert
        assertEquals("CVE-2023-12345", vuln.cveId)
        assertEquals(Severity.HIGH, vuln.severity)
    }

    /**
     * Test: Invalid CVE ID format - missing year
     */
    @Test
    fun `Vulnerability should reject CVE ID without year`() {
        // Act & Assert
        assertThrows<IllegalArgumentException> {
            Vulnerability(
                cveId = "CVE-123456",
                severity = Severity.HIGH,
                affectedSoftware = "OpenSSL",
                description = "Test vulnerability"
            )
        }
    }

    /**
     * Test: Invalid CVE ID format - too few digits
     */
    @Test
    fun `Vulnerability should reject CVE ID with insufficient digits`() {
        // Act & Assert
        assertThrows<IllegalArgumentException> {
            Vulnerability(
                cveId = "CVE-2023-123",
                severity = Severity.HIGH,
                affectedSoftware = "OpenSSL",
                description = "Test vulnerability"
            )
        }
    }

    /**
     * Test: Invalid CVE ID format - wrong prefix
     */
    @Test
    fun `Vulnerability should reject invalid CVE prefix`() {
        // Act & Assert
        assertThrows<IllegalArgumentException> {
            Vulnerability(
                cveId = "BUG-2023-12345",
                severity = Severity.HIGH,
                affectedSoftware = "OpenSSL",
                description = "Test vulnerability"
            )
        }
    }

    /**
     * Test: Valid CVE ID with long sequence number
     */
    @Test
    fun `Vulnerability should accept CVE ID with long sequence number`() {
        // Arrange & Act
        val vuln = Vulnerability(
            cveId = "CVE-2023-123456789",
            severity = Severity.CRITICAL,
            affectedSoftware = "Test",
            description = "Test"
        )

        // Assert
        assertEquals("CVE-2023-123456789", vuln.cveId)
    }

    /**
     * Test: Blank description rejected
     */
    @Test
    fun `Vulnerability should reject blank description`() {
        // Act & Assert
        assertThrows<IllegalArgumentException> {
            Vulnerability(
                cveId = "CVE-2023-12345",
                severity = Severity.HIGH,
                affectedSoftware = "OpenSSL",
                description = ""
            )
        }
    }

    /**
     * Test: CVSS score validation - valid range
     */
    @Test
    fun `Vulnerability should accept valid CVSS scores`() {
        // Test minimum
        val vulnMin = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.LOW,
            affectedSoftware = "Test",
            description = "Test",
            cvssScore = 0.0
        )
        assertEquals(0.0, vulnMin.cvssScore)

        // Test maximum
        val vulnMax = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.CRITICAL,
            affectedSoftware = "Test",
            description = "Test",
            cvssScore = 10.0
        )
        assertEquals(10.0, vulnMax.cvssScore)

        // Test middle
        val vulnMid = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "Test",
            description = "Test",
            cvssScore = 5.5
        )
        assertEquals(5.5, vulnMid.cvssScore)
    }

    /**
     * Test: CVSS score validation - below minimum
     */
    @Test
    fun `Vulnerability should reject CVSS score below minimum`() {
        // Act & Assert
        assertThrows<IllegalArgumentException> {
            Vulnerability(
                cveId = "CVE-2023-12345",
                severity = Severity.HIGH,
                affectedSoftware = "Test",
                description = "Test",
                cvssScore = -0.1
            )
        }
    }

    /**
     * Test: CVSS score validation - above maximum
     */
    @Test
    fun `Vulnerability should reject CVSS score above maximum`() {
        // Act & Assert
        assertThrows<IllegalArgumentException> {
            Vulnerability(
                cveId = "CVE-2023-12345",
                severity = Severity.HIGH,
                affectedSoftware = "Test",
                description = "Test",
                cvssScore = 10.1
            )
        }
    }

    /**
     * Test: CVSS score nullable
     */
    @Test
    fun `Vulnerability should allow null CVSS score`() {
        // Arrange & Act
        val vuln = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "Test",
            description = "Test",
            cvssScore = null
        )

        // Assert
        assertEquals(null, vuln.cvssScore)
    }

    /**
     * Test: toDisplayString() truncates long descriptions
     */
    @Test
    fun `toDisplayString should truncate long descriptions at 100 characters`() {
        // Arrange
        val longDescription = "A".repeat(150)
        val vuln = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "Test",
            description = longDescription
        )

        // Act
        val displayString = vuln.toDisplayString()

        // Assert
        assertEquals(103, displayString.length)  // 100 chars + "..."
        assertTrue(displayString.endsWith("..."))
        assertTrue(displayString.startsWith("A"))
    }

    /**
     * Test: toDisplayString() doesn't truncate short descriptions
     */
    @Test
    fun `toDisplayString should not add ellipsis for short descriptions`() {
        // Arrange
        val shortDescription = "Short description"
        val vuln = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "Test",
            description = shortDescription
        )

        // Act
        val displayString = vuln.toDisplayString()

        // Assert
        assertEquals(shortDescription, displayString)
        assertFalse(displayString.endsWith("..."))
    }

    /**
     * Test: Data class equality
     */
    @Test
    fun `Vulnerability with same data should be equal`() {
        // Arrange
        val vuln1 = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "OpenSSL",
            description = "Test vulnerability"
        )

        val vuln2 = Vulnerability(
            cveId = "CVE-2023-12345",
            severity = Severity.HIGH,
            affectedSoftware = "OpenSSL",
            description = "Test vulnerability"
        )

        // Assert
        assertEquals(vuln1, vuln2)
    }
}
