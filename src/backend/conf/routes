# Risk Management (Requires Auth)
GET     /api/risks                  controllers.RiskController.list()
POST    /api/risks                  controllers.RiskController.create(request: Request)
GET     /api/risks/:id              controllers.RiskController.get(id: Long)
PUT     /api/risks/:id              controllers.RiskController.update(id: Long, request: Request)
DELETE  /api/risks/:id              controllers.RiskController.delete(id: Long)
GET     /api/assets/:assetId/risks  controllers.RiskController.getByAsset(assetId: Long)

# Asset Management (Requires Auth)
GET     /api/assets                 controllers.AssetController.list()
POST    /api/assets                 controllers.AssetController.create(request: Request)
GET     /api/assets/:id             controllers.AssetController.get(id: Long)
PUT     /api/assets/:id             controllers.AssetController.update(id: Long, request: Request)
DELETE  /api/assets/:id             controllers.AssetController.delete(id: Long)

# Risk Assessment Management (Requires Auth)
GET     /api/risk-assessments       controllers.RiskAssessmentController.list()
POST    /api/risk-assessments       controllers.RiskAssessmentController.create(request: Request)
GET     /api/risk-assessments/:id   controllers.RiskAssessmentController.get(id: Long)
PUT     /api/risk-assessments/:id   controllers.RiskAssessmentController.update(id: Long, request: Request)
DELETE  /api/risk-assessments/:id   controllers.RiskAssessmentController.delete(id: Long)
GET     /api/risk-assessments/asset/:assetId controllers.RiskAssessmentController.getByAsset(assetId: Long)
POST    /api/risk-assessments/:id/notify controllers.RiskAssessmentController.sendNotification(id: Long, request: Request)
POST    /api/risk-assessments/:id/remind controllers.RiskAssessmentController.sendReminder(id: Long, request: Request)
POST    /api/risk-assessments/:id/token controllers.RiskAssessmentController.generateToken(id: Long, request: Request)

# Report Management (Requires Auth)
GET     /api/reports/risk-assessment-summary    controllers.ReportController.riskAssessmentSummary()
GET     /api/reports/risk-mitigation-status     controllers.ReportController.riskMitigationStatus()
GET     /api/reports/asset-risk-profile/:assetId controllers.ReportController.assetRiskProfile(assetId: Long)
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~~

# Health check
GET     /api/health                 controllers.HomeController.health()

# Authentication
POST    /api/auth/login             controllers.AuthController.login(request: Request)
POST    /api/auth/logout            controllers.AuthController.logout(request: Request)
GET     /api/auth/status            controllers.AuthController.status(request: Request)

# External Identity Provider Management (Requires Admin Auth)
GET     /api/identity-providers     controllers.IdentityProviderController.list()
GET     /api/identity-providers/enabled controllers.IdentityProviderController.listEnabled()
POST    /api/identity-providers     controllers.IdentityProviderController.create(request: Request)
GET     /api/identity-providers/:id controllers.IdentityProviderController.get(id: Long)
PUT     /api/identity-providers/:id controllers.IdentityProviderController.update(id: Long, request: Request)
DELETE  /api/identity-providers/:id controllers.IdentityProviderController.delete(id: Long)
POST    /api/identity-providers/:id/test controllers.IdentityProviderController.test(id: Long)

# OAuth/OIDC Authentication Flow
GET     /oauth/authorize/:providerId controllers.OAuthController.authorize(providerId: Long, request: Request)
GET     /oauth/callback             controllers.OAuthController.callback(request: Request)
POST    /oauth/logout               controllers.OAuthController.logout(request: Request)

# User Management (Requires Auth)
GET     /api/users                  controllers.UserController.list(request: Request)
POST    /api/users                  controllers.UserController.create(request: Request)
GET     /api/users/:id              controllers.UserController.get(request: Request, id: Long)
PUT     /api/users/:id              controllers.UserController.update(request: Request, id: Long)
DELETE  /api/users/:id              controllers.UserController.delete(request: Request, id: Long)

# Requirement Management (Requires Auth)
GET     /api/requirements           controllers.RequirementController.list(request: Request)
POST    /api/requirements           controllers.RequirementController.create(request: Request)
DELETE  /api/requirements/all       controllers.RequirementController.deleteAllRequirements(request: Request)
GET     /api/requirements/:id       controllers.RequirementController.get(request: Request, id: Long)
PUT     /api/requirements/:id       controllers.RequirementController.update(request: Request, id: Long)
DELETE  /api/requirements/:id       controllers.RequirementController.delete(request: Request, id: Long)
GET     /api/requirements/export/docx controllers.RequirementController.exportToDocx(request: Request)
GET     /api/requirements/export/docx/usecase/:usecaseId controllers.RequirementController.exportToDocxByUseCase(request: Request, usecaseId: Long)
GET     /api/requirements/export/docx/translated/:language controllers.RequirementController.exportToDocxWithTranslation(request: Request, language: String)
GET     /api/requirements/export/docx/usecase/:usecaseId/translated/:language controllers.RequirementController.exportToDocxByUseCaseWithTranslation(request: Request, usecaseId: Long, language: String)
GET     /api/requirements/export/xlsx controllers.RequirementController.exportToExcel(request: Request)
GET     /api/requirements/export/xlsx/usecase/:usecaseId controllers.RequirementController.exportToExcelByUseCase(request: Request, usecaseId: Long)

# Versioned Export Routes
GET     /api/standards/export/docx  controllers.StandardExportController.exportCurrentStandards(request: Request)
GET     /api/standards/export/docx/release/:releaseId controllers.StandardExportController.exportStandardsByRelease(request: Request, releaseId: Long)
GET     /api/standards/export/docx/version/:version controllers.StandardExportController.exportStandardsByVersion(request: Request, version: String)
GET     /api/standards/export/docx/standard/:standardId/all-versions controllers.StandardExportController.exportStandardAllVersions(request: Request, standardId: Long)
GET     /api/standards/export/docx/compare controllers.StandardExportController.exportStandardsComparison(request: Request)
GET     /api/standards/export/standard/:standardId/versions controllers.StandardExportController.getStandardVersions(standardId: Long)

# Standard Management (Requires Auth)
GET     /api/standards              controllers.StandardController.getStandards(request: Request)
POST    /api/standards              controllers.StandardController.createStandard(request: Request)
GET     /api/standards/:id          controllers.StandardController.getStandard(request: Request, id: Long)
PUT     /api/standards/:id          controllers.StandardController.updateStandard(request: Request, id: Long)
DELETE  /api/standards/:id          controllers.StandardController.deleteStandard(request: Request, id: Long)

# Norm Management (Requires Auth)
GET     /api/norms                  controllers.NormController.list()
POST    /api/norms                  controllers.NormController.create(request: Request)
DELETE  /api/norms/all              controllers.NormController.deleteAll()
GET     /api/norms/:id              controllers.NormController.get(id: Long)
PUT     /api/norms/:id              controllers.NormController.update(id: Long, request: Request)
DELETE  /api/norms/:id              controllers.NormController.delete(id: Long)

# Norm Mapping AI Services (Requires Auth)
POST    /api/norm-mapping/suggest   controllers.NormMappingController.suggestMissingMappings(request: Request)
POST    /api/norm-mapping/apply     controllers.NormMappingController.applyMappings(request: Request)
POST    /api/norm-mapping/ensure-norms controllers.NormMappingController.ensureRequiredNorms(request: Request)
GET     /api/norm-mapping/available-norms controllers.NormMappingController.getAvailableNorms(request: Request)

# UseCase Management (Requires Auth)
GET     /api/usecases               controllers.UseCaseController.getUseCases(request: Request)
POST    /api/usecases               controllers.UseCaseController.createUseCase(request: Request)
GET     /api/usecases/:id           controllers.UseCaseController.getUseCase(id: Long)
PUT     /api/usecases/:id           controllers.UseCaseController.updateUseCase(request: Request, id: Long)
DELETE  /api/usecases/:id           controllers.UseCaseController.deleteUseCase(id: Long)

# Release Management (Requires Admin Auth)
GET     /api/releases               controllers.ReleaseController.getAllReleases()
POST    /api/releases               controllers.ReleaseController.createRelease(request: Request)
GET     /api/releases/current       controllers.ReleaseController.getCurrentRelease()
GET     /api/releases/stats         controllers.ReleaseController.getReleaseStats()
GET     /api/releases/status/:status controllers.ReleaseController.getReleasesByStatus(status: String)
GET     /api/releases/version/:version controllers.ReleaseController.getReleaseByVersion(version: String)
GET     /api/releases/:id           controllers.ReleaseController.getReleaseById(id: Long)
PUT     /api/releases/:id           controllers.ReleaseController.updateRelease(request: Request, id: Long)
DELETE  /api/releases/:id           controllers.ReleaseController.deleteRelease(request: Request, id: Long)
POST    /api/releases/:id/publish   controllers.ReleaseController.publishRelease(request: Request, id: Long)
POST    /api/releases/:id/archive   controllers.ReleaseController.archiveRelease(request: Request, id: Long)
GET     /api/releases/:id/requirements controllers.ReleaseController.getRequirementsForRelease(id: Long)
GET     /api/releases/:id/standards controllers.ReleaseController.getStandardsForRelease(id: Long)
GET     /api/releases/:id/norms     controllers.ReleaseController.getNormsForRelease(id: Long)
GET     /api/releases/:id/usecases  controllers.ReleaseController.getUseCasesForRelease(id: Long)

# Response Management (Token-based access)
GET     /api/responses/assessment/:token   controllers.ResponseController.getAssessmentByToken(token: String)
POST    /api/responses/:token/save         controllers.ResponseController.saveResponse(token: String, request: Request)
POST    /api/responses/:token/submit       controllers.ResponseController.submitAssessment(token: String, request: Request)
GET     /api/responses/assessment/:id      controllers.ResponseController.getResponses(id: Long)
GET     /api/responses/assessment/:id/email/:email controllers.ResponseController.getResponsesByEmail(id: Long, email: String)
DELETE  /api/responses/:id                 controllers.ResponseController.deleteResponse(id: Long)

# Email Configuration Management (Requires Auth)
GET     /api/email-config                  controllers.EmailConfigController.list(request: Request)
POST    /api/email-config                  controllers.EmailConfigController.create(request: Request)
GET     /api/email-config/active           controllers.EmailConfigController.getActiveConfiguration(request: Request)
GET     /api/email-config/:id              controllers.EmailConfigController.get(request: Request, id: Long)
PUT     /api/email-config/:id              controllers.EmailConfigController.update(request: Request, id: Long)
DELETE  /api/email-config/:id              controllers.EmailConfigController.delete(request: Request, id: Long)
POST    /api/email-config/:id/test         controllers.EmailConfigController.testConfiguration(request: Request, id: Long)

# Translation Configuration Management (Requires Auth)
GET     /api/translation-config                  controllers.TranslationConfigController.list(request: Request)
POST    /api/translation-config                  controllers.TranslationConfigController.create(request: Request)
GET     /api/translation-config/active           controllers.TranslationConfigController.getActiveConfiguration(request: Request)
GET     /api/translation-config/:id              controllers.TranslationConfigController.get(request: Request, id: Long)
PUT     /api/translation-config/:id              controllers.TranslationConfigController.update(request: Request, id: Long)
DELETE  /api/translation-config/:id              controllers.TranslationConfigController.delete(request: Request, id: Long)
POST    /api/translation-config/:id/test         controllers.TranslationConfigController.testConfiguration(request: Request, id: Long)

# --- Import Routes ---
POST    /api/import/upload-xlsx        controllers.ImportController.uploadXlsx(request: Request)

# --- Requirement File Upload Routes ---
POST    /api/risk-assessments/:riskAssessmentId/requirements/:requirementId/files   controllers.RequirementFileController.uploadFile(riskAssessmentId: Long, requirementId: Long, request: Request)
GET     /api/risk-assessments/:riskAssessmentId/requirements/:requirementId/files   controllers.RequirementFileController.listFiles(riskAssessmentId: Long, requirementId: Long)
GET     /api/files/:fileId/download    controllers.RequirementFileController.downloadFile(fileId: Long, request: Request)
DELETE  /api/files/:fileId             controllers.RequirementFileController.deleteFile(fileId: Long, request: Request)

# --- MCP (Model Context Protocol) Server Routes ---
# HTTP transport endpoint for MCP communication
POST    /mcp                           controllers.MCPController.mcp(request: Request)
GET     /mcp                           controllers.MCPController.mcp(request: Request)
OPTIONS /mcp                           controllers.MCPController.mcp(request: Request)

# MCP server information and status endpoints
GET     /mcp/health                    controllers.MCPController.health()
GET     /mcp/capabilities              controllers.MCPController.capabilities()
GET     /mcp/api-key                   controllers.MCPController.getApiKey(request: Request)

# Home / Catch-all for frontend routing (if needed, keep public)
GET     /                           controllers.HomeController.index(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
