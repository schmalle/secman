package mcp;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import models.*;
import play.db.jpa.JPAApi;
import play.libs.Json;

import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.persistence.TypedQuery;
import java.util.List;

/**
 * Provides Secman operations as MCP tools
 */
@Singleton
public class ToolProvider {
    
    private final JPAApi jpaApi;
    private final ObjectMapper objectMapper;
    
    @Inject
    public ToolProvider(JPAApi jpaApi) {
        this.jpaApi = jpaApi;
        this.objectMapper = new ObjectMapper();
    }
    
    /**
     * List available tools
     */
    public JsonNode listTools(MCPSession session) throws MCPException {
        if (!session.isAuthenticated()) {
            throw new MCPException(MCPException.UNAUTHORIZED, "Authentication required");
        }
        
        ObjectNode result = objectMapper.createObjectNode();
        ArrayNode tools = objectMapper.createArrayNode();
        
        // Search Requirements tool
        ObjectNode searchRequirements = createToolDefinition(
            "search_requirements",
            "Search requirements by text or criteria",
            objectMapper.createObjectNode()
                .put("type", "object")
                .set("properties", objectMapper.createObjectNode()
                    .set("query", objectMapper.createObjectNode()
                        .put("type", "string")
                        .put("description", "Search query text"))
                    .set("standardId", objectMapper.createObjectNode()
                        .put("type", "number")
                        .put("description", "Filter by standard ID (optional)")))
                .set("required", objectMapper.createArrayNode().add("query"))
        );
        tools.add(searchRequirements);
        
        // Create Requirement tool (admin only)
        if (session.isAdmin()) {
            ObjectNode createRequirement = createToolDefinition(
                "create_requirement",
                "Create a new requirement",
                objectMapper.createObjectNode()
                    .put("type", "object")
                    .set("properties", objectMapper.createObjectNode()
                        .set("text", objectMapper.createObjectNode()
                            .put("type", "string")
                            .put("description", "Requirement text"))
                        .set("standardId", objectMapper.createObjectNode()
                            .put("type", "number")
                            .put("description", "Standard ID"))
                        .set("category", objectMapper.createObjectNode()
                            .put("type", "string")
                            .put("description", "Requirement category")))
                    .set("required", objectMapper.createArrayNode().add("text").add("standardId"))
            );
            tools.add(createRequirement);
        }
        
        // Search Assets tool
        ObjectNode searchAssets = createToolDefinition(
            "search_assets",
            "Search assets by name or description",
            objectMapper.createObjectNode()
                .put("type", "object")
                .set("properties", objectMapper.createObjectNode()
                    .set("query", objectMapper.createObjectNode()
                        .put("type", "string")
                        .put("description", "Search query text")))
                .set("required", objectMapper.createArrayNode().add("query"))
        );
        tools.add(searchAssets);
        
        // Get Risk Assessment tool
        ObjectNode getRiskAssessment = createToolDefinition(
            "get_risk_assessment",
            "Get risk assessment for an asset",
            objectMapper.createObjectNode()
                .put("type", "object")
                .set("properties", objectMapper.createObjectNode()
                    .set("assetId", objectMapper.createObjectNode()
                        .put("type", "number")
                        .put("description", "Asset ID")))
                .set("required", objectMapper.createArrayNode().add("assetId"))
        );
        tools.add(getRiskAssessment);
        
        // Generate Compliance Report tool
        ObjectNode generateReport = createToolDefinition(
            "generate_compliance_report",
            "Generate compliance report for a standard",
            objectMapper.createObjectNode()
                .put("type", "object")
                .set("properties", objectMapper.createObjectNode()
                    .set("standardId", objectMapper.createObjectNode()
                        .put("type", "number")
                        .put("description", "Standard ID"))
                    .set("format", objectMapper.createObjectNode()
                        .put("type", "string")
                        .put("enum", objectMapper.createArrayNode().add("summary").add("detailed"))
                        .put("description", "Report format (summary or detailed)")))
                .set("required", objectMapper.createArrayNode().add("standardId"))
        );
        tools.add(generateReport);
        
        result.set("tools", tools);
        return result;
    }
    
    /**
     * Call a specific tool
     */
    public JsonNode callTool(JsonNode params, MCPSession session) throws MCPException {
        if (!session.isAuthenticated()) {
            throw new MCPException(MCPException.UNAUTHORIZED, "Authentication required");
        }
        
        if (!params.has("name")) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Missing tool name");
        }
        
        String toolName = params.get("name").asText();
        JsonNode arguments = params.get("arguments");
        
        return jpaApi.withTransaction(em -> {
            try {
                switch (toolName) {
                    case "search_requirements":
                        return searchRequirements(arguments, em);
                    case "create_requirement":
                        if (!session.isAdmin()) {
                            throw new MCPException(MCPException.FORBIDDEN, "Admin access required");
                        }
                        return createRequirement(arguments, em);
                    case "search_assets":
                        return searchAssets(arguments, em);
                    case "get_risk_assessment":
                        return getRiskAssessment(arguments, em);
                    case "generate_compliance_report":
                        return generateComplianceReport(arguments, em);
                    default:
                        throw new MCPException(MCPException.METHOD_NOT_FOUND, "Unknown tool: " + toolName);
                }
            } catch (MCPException e) {
                throw new RuntimeException(e);
            } catch (Exception e) {
                throw new RuntimeException(new MCPException(MCPException.TOOL_ERROR, "Tool execution failed", e.getMessage()));
            }
        });
    }
    
    private JsonNode searchRequirements(JsonNode arguments, jakarta.persistence.EntityManager em) throws MCPException {
        if (!arguments.has("query")) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Missing query parameter");
        }
        
        String query = arguments.get("query").asText();
        Long standardId = arguments.has("standardId") ? arguments.get("standardId").asLong() : null;
        
        StringBuilder jpql = new StringBuilder("SELECT r FROM Requirement r WHERE LOWER(r.details) LIKE LOWER(:query)");
        // Note: Requirements are not directly linked to Standards in current model
        // They are linked via UseCases
        jpql.append(" ORDER BY r.id");
        
        TypedQuery<Requirement> jpqlQuery = em.createQuery(jpql.toString(), Requirement.class);
        jpqlQuery.setParameter("query", "%" + query + "%");
        
        List<Requirement> requirements = jpqlQuery.getResultList();
        
        ObjectNode result = objectMapper.createObjectNode();
        ArrayNode content = objectMapper.createArrayNode();
        
        ObjectNode textContent = objectMapper.createObjectNode();
        textContent.put("type", "text");
        textContent.put("text", String.format("Found %d requirements matching '%s':\n\n%s", 
            requirements.size(), query, formatRequirements(requirements)));
        content.add(textContent);
        
        result.set("content", content);
        return result;
    }
    
    private JsonNode createRequirement(JsonNode arguments, jakarta.persistence.EntityManager em) throws MCPException {
        if (!arguments.has("text")) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Missing required parameter: text");
        }
        
        String text = arguments.get("text").asText();
        String category = arguments.has("category") ? arguments.get("category").asText() : null;
        
        // Create the requirement
        Requirement requirement = new Requirement();
        requirement.setDetails(text);
        requirement.setShortreq(text.length() > 100 ? text.substring(0, 100) + "..." : text);
        if (category != null) {
            requirement.setChapter(category);
        }
        
        em.persist(requirement);
        em.flush();
        
        ObjectNode result = objectMapper.createObjectNode();
        ArrayNode content = objectMapper.createArrayNode();
        
        ObjectNode textContent = objectMapper.createObjectNode();
        textContent.put("type", "text");
        textContent.put("text", String.format("Successfully created requirement with ID %d:\n\nText: %s\nCategory: %s", 
            requirement.getId(), requirement.getDetails(), category != null ? category : "None"));
        content.add(textContent);
        
        result.set("content", content);
        return result;
    }
    
    private JsonNode searchAssets(JsonNode arguments, jakarta.persistence.EntityManager em) throws MCPException {
        if (!arguments.has("query")) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Missing query parameter");
        }
        
        String query = arguments.get("query").asText();
        
        TypedQuery<Asset> jpqlQuery = em.createQuery(
            "SELECT a FROM Asset a WHERE LOWER(a.name) LIKE LOWER(:query) OR LOWER(a.description) LIKE LOWER(:query) ORDER BY a.id", 
            Asset.class);
        jpqlQuery.setParameter("query", "%" + query + "%");
        
        List<Asset> assets = jpqlQuery.getResultList();
        
        ObjectNode result = objectMapper.createObjectNode();
        ArrayNode content = objectMapper.createArrayNode();
        
        ObjectNode textContent = objectMapper.createObjectNode();
        textContent.put("type", "text");
        textContent.put("text", String.format("Found %d assets matching '%s':\n\n%s", 
            assets.size(), query, formatAssets(assets)));
        content.add(textContent);
        
        result.set("content", content);
        return result;
    }
    
    private JsonNode getRiskAssessment(JsonNode arguments, jakarta.persistence.EntityManager em) throws MCPException {
        if (!arguments.has("assetId")) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Missing assetId parameter");
        }
        
        Long assetId = arguments.get("assetId").asLong();
        
        // Find the asset
        Asset asset = em.find(Asset.class, assetId);
        if (asset == null) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Asset not found: " + assetId);
        }
        
        // Get risk assessments for this asset
        TypedQuery<RiskAssessment> query = em.createQuery(
            "SELECT ra FROM RiskAssessment ra WHERE ra.asset.id = :assetId ORDER BY ra.id", 
            RiskAssessment.class);
        query.setParameter("assetId", assetId);
        
        List<RiskAssessment> assessments = query.getResultList();
        
        ObjectNode result = objectMapper.createObjectNode();
        ArrayNode content = objectMapper.createArrayNode();
        
        ObjectNode textContent = objectMapper.createObjectNode();
        textContent.put("type", "text");
        textContent.put("text", String.format("Risk assessments for asset '%s' (ID: %d):\n\n%s", 
            asset.getName(), assetId, formatRiskAssessments(assessments)));
        content.add(textContent);
        
        result.set("content", content);
        return result;
    }
    
    private JsonNode generateComplianceReport(JsonNode arguments, jakarta.persistence.EntityManager em) throws MCPException {
        if (!arguments.has("standardId")) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Missing standardId parameter");
        }
        
        Long standardId = arguments.get("standardId").asLong();
        String format = arguments.has("format") ? arguments.get("format").asText() : "summary";
        
        // Find the standard
        Standard standard = em.find(Standard.class, standardId);
        if (standard == null) {
            throw new MCPException(MCPException.INVALID_PARAMS, "Standard not found: " + standardId);
        }
        
        // Get requirements for this standard
        TypedQuery<Requirement> requirementQuery = em.createQuery(
            "SELECT r FROM Requirement r WHERE r.standard.id = :standardId ORDER BY r.id", 
            Requirement.class);
        requirementQuery.setParameter("standardId", standardId);
        List<Requirement> requirements = requirementQuery.getResultList();
        
        ObjectNode result = objectMapper.createObjectNode();
        ArrayNode content = objectMapper.createArrayNode();
        
        ObjectNode textContent = objectMapper.createObjectNode();
        textContent.put("type", "text");
        
        StringBuilder report = new StringBuilder();
        report.append(String.format("COMPLIANCE REPORT - %s\n", standard.getName()));
        report.append("=" .repeat(50)).append("\n\n");
        report.append(String.format("Standard: %s\n", standard.getName()));
        report.append(String.format("Description: %s\n", standard.getDescription() != null ? standard.getDescription() : "N/A"));
        report.append(String.format("Total Requirements: %d\n\n", requirements.size()));
        
        if ("detailed".equals(format)) {
            report.append("REQUIREMENTS:\n");
            report.append("-" .repeat(30)).append("\n");
            for (Requirement req : requirements) {
                report.append(String.format("%d. %s\n", req.getId(), req.getText()));
                if (req.getCategory() != null) {
                    report.append(String.format("   Category: %s\n", req.getCategory()));
                }
                report.append("\n");
            }
        }
        
        textContent.put("text", report.toString());
        content.add(textContent);
        
        result.set("content", content);
        return result;
    }
    
    private ObjectNode createToolDefinition(String name, String description, ObjectNode inputSchema) {
        ObjectNode tool = objectMapper.createObjectNode();
        tool.put("name", name);
        tool.put("description", description);
        tool.set("inputSchema", inputSchema);
        return tool;
    }
    
    private String formatRequirements(List<Requirement> requirements) {
        StringBuilder sb = new StringBuilder();
        for (Requirement req : requirements) {
            sb.append(String.format("%d. %s", req.getId(), req.getText()));
            if (req.getStandard() != null) {
                sb.append(String.format(" (Standard: %s)", req.getStandard().getName()));
            }
            if (req.getCategory() != null) {
                sb.append(String.format(" [%s]", req.getCategory()));
            }
            sb.append("\n\n");
        }
        return sb.toString();
    }
    
    private String formatAssets(List<Asset> assets) {
        StringBuilder sb = new StringBuilder();
        for (Asset asset : assets) {
            sb.append(String.format("%d. %s", asset.getId(), asset.getName()));
            if (asset.getDescription() != null) {
                sb.append(String.format("\n   Description: %s", asset.getDescription()));
            }
            sb.append("\n\n");
        }
        return sb.toString();
    }
    
    private String formatRiskAssessments(List<RiskAssessment> assessments) {
        if (assessments.isEmpty()) {
            return "No risk assessments found for this asset.";
        }
        
        StringBuilder sb = new StringBuilder();
        for (RiskAssessment assessment : assessments) {
            sb.append(String.format("Assessment ID: %d\n", assessment.getId()));
            if (assessment.getRisk() != null) {
                sb.append(String.format("Risk: %s\n", assessment.getRisk().getName()));
                if (assessment.getRisk().getDescription() != null) {
                    sb.append(String.format("Risk Description: %s\n", assessment.getRisk().getDescription()));
                }
            }
            sb.append("\n");
        }
        return sb.toString();
    }
}