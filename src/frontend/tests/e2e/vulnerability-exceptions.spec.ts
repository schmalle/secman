/**
 * E2E Test: Vulnerability Exceptions CRUD
 *
 * Tests the vulnerability exception management workflow:
 * 1. Create IP-based exception
 * 2. Create product-based exception with expiration
 * 3. Edit existing exception
 * 4. Delete exception
 * 5. Exception indicator appears on vulnerabilities page
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */

import { test, expect } from '@playwright/test';

test.describe('Vulnerability Exceptions CRUD', () => {
    test.beforeEach(async ({ page }) => {
        // Login as VULN user or admin
        await page.goto('/login');
        await page.fill('input[name="username"]', 'admin');
        await page.fill('input[name="password"]', 'admin');
        await page.click('button[type="submit"]');
        await page.waitForURL('/');

        // Navigate to exceptions page
        await page.goto('/vulnerabilities/exceptions');
        await expect(page.locator('h3:has-text("Vulnerability Exceptions")')).toBeVisible();
    });

    test('create IP-based exception', async ({ page }) => {
        // Click "Create Exception" button
        await page.click('button:has-text("Create Exception")');

        // Verify modal opens
        await expect(page.locator('.modal.show')).toBeVisible();
        await expect(page.locator('.modal-title:has-text("Create Exception")')).toBeVisible();

        // Select IP type
        await page.selectOption('select#exceptionType', 'IP');

        // Fill form
        await page.fill('input#targetValue', '192.168.1.10');
        await page.fill('textarea#reason', 'Test IP exception for development server');

        // Submit form
        await page.click('button:has-text("Create")');

        // Verify modal closes
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Verify exception appears in table
        await expect(page.locator('tr:has-text("192.168.1.10")')).toBeVisible();
        await expect(page.locator('tr:has-text("Test IP exception")')).toBeVisible();

        // Verify shows as Active (no expiration)
        const exceptionRow = page.locator('tr:has-text("192.168.1.10")');
        await expect(exceptionRow.locator('text=Active, text=Never expires')).toBeVisible();
    });

    test('create product-based exception with expiration', async ({ page }) => {
        // Click "Create Exception" button
        await page.click('button:has-text("Create Exception")');

        // Select PRODUCT type
        await page.selectOption('select#exceptionType', 'PRODUCT');

        // Fill form
        await page.fill('input#targetValue', 'OpenSSH 7.4');

        // Set expiration date (30 days from now)
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + 30);
        const dateString = futureDate.toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:mm
        await page.fill('input#expirationDate', dateString);

        await page.fill('textarea#reason', 'Exception for legacy SSH version - migration planned');

        // Submit form
        await page.click('button:has-text("Create")');

        // Verify modal closes
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Verify exception appears in table
        await expect(page.locator('tr:has-text("OpenSSH 7.4")')).toBeVisible();
        await expect(page.locator('tr:has-text("legacy SSH version")')).toBeVisible();

        // Verify shows as Active with expiration date
        const exceptionRow = page.locator('tr:has-text("OpenSSH 7.4")');
        await expect(exceptionRow.locator('text=Active')).toBeVisible();
    });

    test('edit existing exception', async ({ page }) => {
        // First create an exception
        await page.click('button:has-text("Create Exception")');
        await page.selectOption('select#exceptionType', 'IP');
        await page.fill('input#targetValue', '10.0.0.50');
        await page.fill('textarea#reason', 'Original reason');
        await page.click('button:has-text("Create")');
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Find the exception row and click Edit
        const exceptionRow = page.locator('tr:has-text("10.0.0.50")');
        await exceptionRow.locator('button:has-text("Edit"), button[title="Edit"]').click();

        // Verify edit modal opens
        await expect(page.locator('.modal.show')).toBeVisible();
        await expect(page.locator('.modal-title:has-text("Edit Exception")')).toBeVisible();

        // Modify reason
        await page.fill('textarea#reason', 'Updated reason - server decommissioned');

        // Add expiration date
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + 7);
        const dateString = futureDate.toISOString().slice(0, 16);
        await page.fill('input#expirationDate', dateString);

        // Save changes
        await page.click('button:has-text("Save")');

        // Verify modal closes
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Verify changes are reflected in table
        await expect(page.locator('tr:has-text("10.0.0.50")')).toBeVisible();
        await expect(page.locator('tr:has-text("server decommissioned")')).toBeVisible();
    });

    test('delete exception', async ({ page }) => {
        // First create an exception
        await page.click('button:has-text("Create Exception")');
        await page.selectOption('select#exceptionType', 'IP');
        await page.fill('input#targetValue', '172.16.0.100');
        await page.fill('textarea#reason', 'Temporary exception for testing');
        await page.click('button:has-text("Create")');
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Verify exception exists
        await expect(page.locator('tr:has-text("172.16.0.100")')).toBeVisible();

        // Find the exception row and click Delete
        const exceptionRow = page.locator('tr:has-text("172.16.0.100")');

        // Setup dialog handler before clicking delete
        page.on('dialog', dialog => dialog.accept());

        await exceptionRow.locator('button:has-text("Delete"), button[title="Delete"]').click();

        // Verify exception is removed from table
        await expect(page.locator('tr:has-text("172.16.0.100")')).not.toBeVisible();
    });

    test('exception indicator appears on current vulnerabilities page', async ({ page }) => {
        // First create an IP-based exception
        await page.click('button:has-text("Create Exception")');
        await page.selectOption('select#exceptionType', 'IP');
        await page.fill('input#targetValue', '192.168.1.20');
        await page.fill('textarea#reason', 'Exception for vulnerability indicator test');
        await page.click('button:has-text("Create")');
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Navigate to current vulnerabilities page
        await page.goto('/vulnerabilities/current');
        await expect(page.locator('h3:has-text("Current Vulnerabilities")')).toBeVisible();

        // Look for the exception indicator (assuming there's a vulnerability for this IP)
        // The indicator should be a badge or icon showing the vulnerability has an exception
        const vulnerabilityRow = page.locator('tr:has-text("192.168.1.20")').first();

        if (await vulnerabilityRow.count() > 0) {
            // Verify exception indicator is present
            await expect(vulnerabilityRow.locator('.badge:has-text("Exception"), i.bi-shield-check, text=Excepted')).toBeVisible();
        }
    });

    test('form validation prevents empty required fields', async ({ page }) => {
        // Click "Create Exception" button
        await page.click('button:has-text("Create Exception")');

        // Try to submit without filling required fields
        await page.click('button:has-text("Create")');

        // Modal should still be visible (form validation failed)
        await expect(page.locator('.modal.show')).toBeVisible();

        // Verify validation messages or that required fields are marked
        const targetValueInput = page.locator('input#targetValue');
        const isInvalid = await targetValueInput.evaluate((el) => {
            if (el instanceof HTMLInputElement) {
                return el.checkValidity();
            }
            return false;
        });
        expect(isInvalid).toBe(false);
    });

    test('expired exceptions show as inactive', async ({ page }) => {
        // Create an exception with past expiration date
        await page.click('button:has-text("Create Exception")');
        await page.selectOption('select#exceptionType', 'PRODUCT');
        await page.fill('input#targetValue', 'ExpiredProduct 1.0');

        // Set expiration date in the past
        const pastDate = new Date();
        pastDate.setDate(pastDate.getDate() - 1);
        const dateString = pastDate.toISOString().slice(0, 16);
        await page.fill('input#expirationDate', dateString);

        await page.fill('textarea#reason', 'Expired exception for testing');
        await page.click('button:has-text("Create")');
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Verify exception shows as Expired or Inactive
        const exceptionRow = page.locator('tr:has-text("ExpiredProduct 1.0")');
        await expect(exceptionRow.locator('text=Expired, text=Inactive, .badge-danger')).toBeVisible();
    });

    test('can filter exceptions by type', async ({ page }) => {
        // Create exceptions of different types
        // IP exception
        await page.click('button:has-text("Create Exception")');
        await page.selectOption('select#exceptionType', 'IP');
        await page.fill('input#targetValue', '10.10.10.10');
        await page.fill('textarea#reason', 'IP test');
        await page.click('button:has-text("Create")');
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // PRODUCT exception
        await page.click('button:has-text("Create Exception")');
        await page.selectOption('select#exceptionType', 'PRODUCT');
        await page.fill('input#targetValue', 'TestProduct 2.0');
        await page.fill('textarea#reason', 'Product test');
        await page.click('button:has-text("Create")');
        await expect(page.locator('.modal.show')).not.toBeVisible();

        // Verify both are visible
        await expect(page.locator('tr:has-text("10.10.10.10")')).toBeVisible();
        await expect(page.locator('tr:has-text("TestProduct 2.0")')).toBeVisible();

        // If there's a filter dropdown/button, test filtering
        const filterButton = page.locator('select#typeFilter, button:has-text("Filter")');
        if (await filterButton.count() > 0) {
            // Filter by IP
            await page.selectOption('select#typeFilter', 'IP');
            await expect(page.locator('tr:has-text("10.10.10.10")')).toBeVisible();
            await expect(page.locator('tr:has-text("TestProduct 2.0")')).not.toBeVisible();

            // Filter by PRODUCT
            await page.selectOption('select#typeFilter', 'PRODUCT');
            await expect(page.locator('tr:has-text("10.10.10.10")')).not.toBeVisible();
            await expect(page.locator('tr:has-text("TestProduct 2.0")')).toBeVisible();
        }
    });
});
