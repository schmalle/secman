/**
 * E2E Test: Vulnerability Import Flow
 *
 * Tests the complete vulnerability import workflow:
 * 1. Navigate to import page
 * 2. Select vulnerabilities tab
 * 3. Upload Excel file with scan date
 * 4. Verify success message and counts
 * 5. Navigate to asset page
 * 6. View vulnerabilities for imported asset
 *
 * Related to: Feature 003-i-want-to (Vulnerability Management System)
 */

import { test, expect } from '@playwright/test';
import * as path from 'path';

test.describe('Vulnerability Import Flow', () => {
    test.beforeEach(async ({ page }) => {
        // Login first
        await page.goto('/login');
        await page.fill('input[name="username"]', 'admin');
        await page.fill('input[name="password"]', 'admin');
        await page.click('button[type="submit"]');
        await page.waitForURL('/');
    });

    test('should import vulnerabilities and display them', async ({ page }) => {
        // Navigate to import page
        await page.goto('/import');
        await expect(page.locator('h3')).toContainText('Import Data');

        // Click Vulnerabilities tab
        await page.click('button:has-text("Vulnerabilities")');
        await expect(page.locator('.nav-link.active')).toContainText('Vulnerabilities');

        // Verify scan date input is visible and pre-filled
        const scanDateInput = page.locator('input[type="datetime-local"]');
        await expect(scanDateInput).toBeVisible();
        const scanDateValue = await scanDateInput.inputValue();
        expect(scanDateValue).toBeTruthy(); // Should be pre-filled

        // Upload test vulnerability file
        const testFilePath = path.join(__dirname, '../../testdata/test-vulnerabilities.xlsx');
        const fileInput = page.locator('input[type="file"]');
        await fileInput.setInputFiles(testFilePath);

        // Verify file is selected
        await expect(page.locator('text=File Selected')).toBeVisible();
        await expect(page.locator('text=test-vulnerabilities.xlsx')).toBeVisible();

        // Click Import button
        await page.click('button:has-text("Import Vulnerabilities")');

        // Wait for processing
        await expect(page.locator('text=Processing File...')).toBeVisible();

        // Verify success message appears
        await expect(page.locator('.alert-success')).toBeVisible({ timeout: 10000 });
        await expect(page.locator('.alert-success')).toContainText('Success');

        // Verify import summary is displayed
        await expect(page.locator('text=Import Summary')).toBeVisible();
        await expect(page.locator('text=Imported:')).toBeVisible();
        await expect(page.locator('text=Skipped:')).toBeVisible();
        await expect(page.locator('text=Assets Created:')).toBeVisible();

        // Navigate to assets page
        await page.goto('/asset');
        await expect(page.locator('h5:has-text("Assets")')).toBeVisible();

        // Find and click vulnerabilities button for an asset
        // Look for MSHome asset (from test data)
        const assetRow = page.locator('tr:has-text("MSHome")').first();
        if (await assetRow.count() > 0) {
            const vulnButton = assetRow.locator('button:has-text("Vulnerabilities")');
            await vulnButton.click();

            // Verify vulnerability modal opens
            await expect(page.locator('.modal.show')).toBeVisible();
            await expect(page.locator('.modal-title')).toContainText('Vulnerability History');
            await expect(page.locator('.modal-title')).toContainText('MSHome');

            // Verify vulnerability table is displayed
            await expect(page.locator('table thead th:has-text("CVE ID")')).toBeVisible();
            await expect(page.locator('table thead th:has-text("CVSS Severity")')).toBeVisible();

            // Close modal
            await page.click('.modal .btn-close');
            await expect(page.locator('.modal.show')).not.toBeVisible();
        }
    });

    test('should show error for invalid file', async ({ page }) => {
        await page.goto('/import');
        await page.click('button:has-text("Vulnerabilities")');

        // Try to upload a non-Excel file
        const invalidFile = Buffer.from('invalid content');
        await page.setInputFiles('input[type="file"]', {
            name: 'test.txt',
            mimeType: 'text/plain',
            buffer: invalidFile
        });

        // Should show error message
        await expect(page.locator('.alert-danger')).toBeVisible();
        await expect(page.locator('.alert-danger')).toContainText('valid Excel file');
    });

    test('should require scan date before upload', async ({ page }) => {
        await page.goto('/import');
        await page.click('button:has-text("Vulnerabilities")');

        // Upload valid file
        const testFilePath = path.join(__dirname, '../../testdata/test-vulnerabilities.xlsx');
        await page.setInputFiles('input[type="file"]', testFilePath);

        // Clear scan date
        await page.fill('input[type="datetime-local"]', '');

        // Try to upload
        await page.click('button:has-text("Import Vulnerabilities")');

        // Should show error about missing scan date
        await expect(page.locator('.alert-danger')).toBeVisible();
        await expect(page.locator('.alert-danger')).toContainText('scan date');
    });

    test('should display skipped rows details', async ({ page }) => {
        // This test assumes the test file has at least one invalid row
        await page.goto('/import');
        await page.click('button:has-text("Vulnerabilities")');

        const testFilePath = path.join(__dirname, '../../testdata/test-vulnerabilities.xlsx');
        await page.setInputFiles('input[type="file"]', testFilePath);

        await page.click('button:has-text("Import Vulnerabilities")');

        // Wait for success
        await expect(page.locator('.alert-success')).toBeVisible({ timeout: 10000 });

        // If there are skipped rows, they should be displayed
        const skippedBadge = page.locator('text=Skipped:').locator('.badge');
        const skippedCount = await skippedBadge.textContent();

        if (skippedCount && parseInt(skippedCount) > 0) {
            // Skipped details table should be visible
            await expect(page.locator('h6:has-text("Skipped Rows")')).toBeVisible();
            await expect(page.locator('table th:has-text("Row")')).toBeVisible();
            await expect(page.locator('table th:has-text("Reason")')).toBeVisible();
        }
    });

    test('should allow changing file before upload', async ({ page }) => {
        await page.goto('/import');
        await page.click('button:has-text("Vulnerabilities")');

        // Upload first file
        const testFilePath = path.join(__dirname, '../../testdata/test-vulnerabilities.xlsx');
        await page.setInputFiles('input[type="file"]', testFilePath);
        await expect(page.locator('text=File Selected')).toBeVisible();

        // Click the X button to remove file
        await page.click('.btn-outline-secondary:has(i.bi-x)');

        // File should be cleared
        await expect(page.locator('text=File Selected')).not.toBeVisible();
        await expect(page.locator('text=Choose Excel file or drag & drop')).toBeVisible();

        // Upload button should be disabled
        const uploadButton = page.locator('button:has-text("Import Vulnerabilities")');
        await expect(uploadButton).toBeDisabled();
    });
});
