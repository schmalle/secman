/**
 * API client for vulnerability statistics endpoints
 *
 * Provides TypeScript interfaces and methods for accessing the vulnerability statistics API.
 * All requests include JWT authentication from localStorage (authToken).
 *
 * Feature: 036-vuln-stats-lense
 * Task: T007
 * Spec reference: spec.md Section "API Endpoints"
 * Contract: contracts/vulnerability-statistics-api.yaml
 */

import axios from 'axios';

// Base API URL - defaults to localhost for development
const API_BASE_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8080';

/**
 * Get JWT token from localStorage for authentication
 * Note: The app uses localStorage.getItem('authToken'), not sessionStorage.getItem('jwtToken')
 */
function getAuthHeader(): Record<string, string> {
  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;
  return token ? { Authorization: `Bearer ${token}` } : {};
}

/**
 * Create axios instance with base configuration
 */
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// TypeScript interfaces for API responses

/**
 * Most common vulnerability DTO
 * Matches backend: com.secman.dto.MostCommonVulnerabilityDto
 */
export interface MostCommonVulnerabilityDto {
  vulnerabilityId: string;       // CVE identifier
  cvssSeverity: string;          // CRITICAL, HIGH, MEDIUM, LOW, UNKNOWN
  occurrenceCount: number;       // Total occurrences across assets
  affectedAssetCount: number;    // Number of distinct assets affected
}

/**
 * Severity distribution DTO
 * Matches backend: com.secman.dto.SeverityDistributionDto
 */
export interface SeverityDistributionDto {
  critical: number;              // Count of CRITICAL vulnerabilities
  high: number;                  // Count of HIGH vulnerabilities
  medium: number;                // Count of MEDIUM vulnerabilities
  low: number;                   // Count of LOW vulnerabilities
  unknown: number;               // Count of UNKNOWN vulnerabilities
  total: number;                 // Total vulnerability count
  criticalPercentage: number;    // Percentage of CRITICAL (0-100)
  highPercentage: number;        // Percentage of HIGH (0-100)
  mediumPercentage: number;      // Percentage of MEDIUM (0-100)
  lowPercentage: number;         // Percentage of LOW (0-100)
  unknownPercentage: number;     // Percentage of UNKNOWN (0-100)
}

/**
 * Top asset by vulnerabilities DTO
 * Matches backend: com.secman.dto.TopAssetByVulnerabilitiesDto
 */
export interface TopAssetByVulnerabilitiesDto {
  assetId: number;               // Asset ID for navigation
  assetName: string;             // Asset name
  assetType: string | null;      // Asset type (may be null)
  assetIp: string | null;        // Asset IP (may be null)
  totalVulnerabilityCount: number; // Total vulnerability count
  criticalCount: number;         // Count of CRITICAL vulnerabilities
  highCount: number;             // Count of HIGH vulnerabilities
  mediumCount: number;           // Count of MEDIUM vulnerabilities
  lowCount: number;              // Count of LOW vulnerabilities
}

/**
 * Vulnerability by asset type DTO
 * Matches backend: com.secman.dto.VulnerabilityByAssetTypeDto
 */
export interface VulnerabilityByAssetTypeDto {
  assetType: string;             // Asset type (or "Unknown")
  assetCount: number;            // Number of distinct assets
  totalVulnerabilityCount: number; // Total vulnerability count
  criticalCount: number;         // Count of CRITICAL vulnerabilities
  highCount: number;             // Count of HIGH vulnerabilities
  mediumCount: number;           // Count of MEDIUM vulnerabilities
  lowCount: number;              // Count of LOW vulnerabilities
  averageVulnerabilitiesPerAsset: number; // Average vulns per asset
}

/**
 * Temporal trend data point DTO
 * Matches backend: com.secman.dto.TemporalTrendDataPointDto
 */
export interface TemporalTrendDataPointDto {
  date: string;                  // Date in YYYY-MM-DD format
  totalCount: number;            // Total vulnerability count
  criticalCount: number;         // Count of CRITICAL vulnerabilities
  highCount: number;             // Count of HIGH vulnerabilities
  mediumCount: number;           // Count of MEDIUM vulnerabilities
  lowCount: number;              // Count of LOW vulnerabilities
}

/**
 * Temporal trends DTO
 * Matches backend: com.secman.dto.TemporalTrendsDto
 */
export interface TemporalTrendsDto {
  startDate: string;             // Start date (YYYY-MM-DD)
  endDate: string;               // End date (YYYY-MM-DD)
  days: number;                  // Number of days (30, 60, or 90)
  dataPoints: TemporalTrendDataPointDto[]; // Daily data points
}

/**
 * Vulnerability Statistics API Client
 *
 * Task: T007 (base), T015 (US1 methods)
 */
class VulnerabilityStatisticsApi {

  /**
   * Get most common vulnerabilities (top 10 by occurrence)
   *
   * Feature: 036-vuln-stats-lense
   * Task: T015 [US1]
   * Endpoint: GET /api/vulnerability-statistics/most-common
   * User Story: US1 - View Most Common Vulnerabilities (P1)
   *
   * @returns Promise resolving to list of most common vulnerabilities
   * @throws Error if request fails or user is not authenticated
   */
  async getMostCommonVulnerabilities(): Promise<MostCommonVulnerabilityDto[]> {
    const response = await apiClient.get<MostCommonVulnerabilityDto[]>(
      '/api/vulnerability-statistics/most-common',
      { headers: getAuthHeader() }
    );
    return response.data;
  }

  /**
   * Get severity distribution statistics
   *
   * Feature: 036-vuln-stats-lense
   * Task: T025 [US2]
   * Endpoint: GET /api/vulnerability-statistics/severity-distribution
   * User Story: US2 - View Severity Distribution (P2)
   *
   * @returns Promise resolving to severity distribution with counts and percentages
   * @throws Error if request fails or user is not authenticated
   */
  async getSeverityDistribution(): Promise<SeverityDistributionDto> {
    const response = await apiClient.get<SeverityDistributionDto>(
      '/api/vulnerability-statistics/severity-distribution',
      { headers: getAuthHeader() }
    );
    return response.data;
  }

  /**
   * Get top 10 assets ranked by vulnerability count
   *
   * Feature: 036-vuln-stats-lense
   * Task: T039 [US3]
   * Endpoint: GET /api/vulnerability-statistics/top-assets
   * User Story: US3 - View Asset Vulnerability Statistics (P3)
   *
   * @returns Promise resolving to list of top assets with vulnerability counts
   * @throws Error if request fails or user is not authenticated
   */
  async getTopAssetsByVulnerabilities(): Promise<TopAssetByVulnerabilitiesDto[]> {
    const response = await apiClient.get<TopAssetByVulnerabilitiesDto[]>(
      '/api/vulnerability-statistics/top-assets',
      { headers: getAuthHeader() }
    );
    return response.data;
  }

  /**
   * Get vulnerability statistics grouped by asset type
   *
   * Feature: 036-vuln-stats-lense
   * Task: T039 [US3]
   * Endpoint: GET /api/vulnerability-statistics/by-asset-type
   * User Story: US3 - View Asset Vulnerability Statistics (P3)
   *
   * @returns Promise resolving to list of asset types with vulnerability statistics
   * @throws Error if request fails or user is not authenticated
   */
  async getVulnerabilitiesByAssetType(): Promise<VulnerabilityByAssetTypeDto[]> {
    const response = await apiClient.get<VulnerabilityByAssetTypeDto[]>(
      '/api/vulnerability-statistics/by-asset-type',
      { headers: getAuthHeader() }
    );
    return response.data;
  }

  /**
   * Get temporal vulnerability trends
   *
   * Feature: 036-vuln-stats-lense
   * Task: T051 [US4]
   * Endpoint: GET /api/vulnerability-statistics/temporal-trends
   * User Story: US4 - View Temporal Trends (P4)
   *
   * @param days Number of days to analyze (30, 60, or 90)
   * @returns Promise resolving to temporal trends with daily data points
   * @throws Error if request fails, user is not authenticated, or days is invalid
   */
  async getTemporalTrends(days: 30 | 60 | 90 = 30): Promise<TemporalTrendsDto> {
    const response = await apiClient.get<TemporalTrendsDto>(
      '/api/vulnerability-statistics/temporal-trends',
      {
        headers: getAuthHeader(),
        params: { days }
      }
    );
    return response.data;
  }
}

export const vulnerabilityStatisticsApi = new VulnerabilityStatisticsApi();
export { getAuthHeader, apiClient };
