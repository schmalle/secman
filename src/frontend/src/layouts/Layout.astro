---
import TopNav from '../components/TopNav.astro';
import Footer from '../components/Footer.astro';
import Sidebar from '../components/Sidebar.tsx';
import Header from '../components/Header.tsx'; // Import Header component
import 'bootstrap/dist/css/bootstrap.min.css'; 
import 'bootstrap-icons/font/bootstrap-icons.css'; // Import Bootstrap Icons CSS

interface Props {
    title?: string;
}

const { title = "SecMan" } = Astro.props; // Updated default title

// Define public paths that don't require login
const publicPaths = ['/login']; // Add other public paths if needed

// Check auth status on the server-side for initial load
let user = null;
let error = null;
try {
    // Use Astro.cookies API to potentially check session, but Play's session is HttpOnly by default.
    // A better approach is an API call, but that's client-side.
    // For SSR/initial load protection, we rely on redirecting *after* client-side check.
    // Or, implement a middleware in Astro if more robust SSR protection is needed.
} catch (e: any) { // Add type annotation
    error = e.message;
    console.error("Error checking auth status server-side (placeholder):", e);
}

const isPublicPage = publicPaths.includes(Astro.url.pathname);
const requiresRedirect = !user && !isPublicPage; 
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" /> 
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
        <style>
            .main-layout {
                display: flex;
                min-height: 100vh;
                padding-top: 80px; /* Account for larger fixed navbar with bigger logo */
            }
            .content-wrapper {
                flex-grow: 1;
                display: flex;
            }
        </style>
	</head>
	<body>
        <Header client:load />
		<div class="main-layout">
			<div class="container-fluid content-wrapper">
				<div class="row w-100">
					{/* Sidebar only shown if user is potentially logged in (not on public pages like login) */}
					{!isPublicPage && (
						<div class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
							<Sidebar client:visible />
						</div>
					)}
					{/* Main content area */}
					<main class={isPublicPage ? "col-12" : "col-md-9 ms-sm-auto col-lg-10 px-md-4 pt-4"}>
						<slot />
						<Footer />
					</main>
				</div>
			</div>
		</div>

        <!-- Bootstrap JS Bundle -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

        {/* Client-side Auth Check and Redirect */}
        <script define:vars={{ isPublicPage }}>
            // Define a global variable to hold user info
            window.currentUser = null;

            async function checkAuthAndRedirect() {
                if (isPublicPage) {
                    // Don't redirect if on a public page like /login or /about
                    return;
                }
                try {
                    const response = await fetch('/api/auth/status', {
                        credentials: 'include'
                    });
                    if (!response.ok) {
                        // Not logged in or session invalid, redirect to login
                        if (response.status === 401) {
                             console.log('Not authenticated, redirecting to /login');
                             window.location.href = '/login';
                        } else {
                            // Handle other errors if needed
                            console.error('Auth status check failed:', response.statusText);
                        }
                    } else {
                        // User is logged in, store user data globally.
                        const user = await response.json();
                        window.currentUser = user; // Store user data
                        console.log('User authenticated:', user.username, 'Roles:', user.roles);
                        // Trigger a custom event if components need to react to user data being loaded
                        window.dispatchEvent(new CustomEvent('userLoaded'));
                    }
                } catch (error) {
                    console.error('Failed to fetch auth status:', error);
                    // Optionally redirect to login on network error too, or show an error message
                    // window.location.href = '/login';
                }
            }
            checkAuthAndRedirect();

            // Global fetch wrapper to handle 401 Unauthorized
            const originalFetch = window.fetch;
            window.fetch = async (...args) => {
                let response = await originalFetch(...args);
                if (response.status === 401 && !isPublicPage) {
                    console.log('Intercepted 401, redirecting to /login');
                    window.location.href = '/login';
                    // Return a dummy response or throw an error to prevent further processing
                    return new Response(null, { status: 401, statusText: 'Unauthorized' }); 
                }
                return response;
            };
        </script>
	</body>
</html>

<style is:global>
    /* Global styles for the application */
    body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }
    
    /* Ensure main content area takes full height and handles scrolling properly */
    main {
        min-height: calc(100vh - 80px); /* Account for header height */
        display: flex;
        flex-direction: column;
    }
    
    /* Push footer to bottom */
    main > footer {
        margin-top: auto;
    }
    
    /* Sidebar adjustments */
    .sidebar {
        position: sticky;
        top: 80px; /* Account for fixed header */
        height: calc(100vh - 80px);
        overflow-y: auto;
    }
</style>
