/**
 * Vulnerability Import Form Component
 *
 * Provides UI for uploading vulnerability Excel files with scan date selection
 *
 * Features:
 * - File input for .xlsx upload
 * - Datetime picker for scan date (pre-filled with current datetime)
 * - Loading indicator during upload
 * - Success/error message display
 *
 * Related to: Feature 003-i-want-to (Vulnerability Management System)
 */

import React, { useState, useRef } from 'react';
import { uploadVulnerabilityFile, type VulnerabilityImportResponse } from '../services/vulnerabilityService';

const VulnerabilityImportForm = () => {
    const [selectedFile, setSelectedFile] = useState<File | null>(null);
    const [scanDate, setScanDate] = useState<string>(() => {
        // Pre-fill with current datetime in ISO 8601 format (YYYY-MM-DDTHH:mm)
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    });
    const [uploadStatus, setUploadStatus] = useState<string>('');
    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [importResponse, setImportResponse] = useState<VulnerabilityImportResponse | null>(null);
    const [isDragOver, setIsDragOver] = useState<boolean>(false);
    const fileInputRef = useRef<HTMLInputElement>(null);

    const validateFile = (file: File): boolean => {
        const validTypes = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel'
        ];
        const validExtensions = ['.xlsx', '.xls'];
        const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));

        return validTypes.includes(file.type) || validExtensions.includes(fileExtension);
    };

    const formatFileSize = (bytes: number): string => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    const handleFileSelection = (file: File) => {
        if (validateFile(file)) {
            setSelectedFile(file);
            setUploadStatus('');
            setImportResponse(null);
        } else {
            setSelectedFile(null);
            setUploadStatus('Error: Please select a valid Excel file (.xlsx or .xls).');
        }
    };

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        if (event.target.files && event.target.files[0]) {
            handleFileSelection(event.target.files[0]);
        } else {
            setSelectedFile(null);
        }
    };

    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
        event.preventDefault();
        setIsDragOver(true);
    };

    const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {
        event.preventDefault();
        setIsDragOver(false);
    };

    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
        event.preventDefault();
        setIsDragOver(false);

        const files = event.dataTransfer.files;
        if (files.length > 0) {
            handleFileSelection(files[0]);
        }
    };

    const handleUploadAreaClick = () => {
        fileInputRef.current?.click();
    };

    const handleUpload = async () => {
        console.log('[VulnerabilityImport] Upload button clicked');
        console.log('[VulnerabilityImport] File:', selectedFile?.name);
        console.log('[VulnerabilityImport] Scan date:', scanDate);

        if (!selectedFile) {
            console.error('[VulnerabilityImport] No file selected');
            setUploadStatus('Error: No file selected.');
            return;
        }

        if (!scanDate) {
            console.error('[VulnerabilityImport] No scan date');
            setUploadStatus('Error: Please select a scan date.');
            return;
        }

        console.log('[VulnerabilityImport] Starting upload...');
        setIsUploading(true);
        setUploadStatus('Uploading...');
        setImportResponse(null);

        try {
            // Convert datetime-local to ISO 8601 format for backend
            const isoScanDate = new Date(scanDate).toISOString().slice(0, 19);
            console.log('[VulnerabilityImport] ISO scan date:', isoScanDate);

            const response = await uploadVulnerabilityFile(selectedFile, isoScanDate);
            console.log('[VulnerabilityImport] Upload successful:', response);

            setImportResponse(response);
            setUploadStatus(`Success: ${response.message}`);
            setSelectedFile(null);
            if (fileInputRef.current) {
                fileInputRef.current.value = '';
            }
        } catch (error: any) {
            console.error('[VulnerabilityImport] Upload error:', error);
            const errorMessage = error.message || 'Upload failed. Please try again.';
            setUploadStatus(`Error: ${errorMessage}`);
        } finally {
            setIsUploading(false);
        }
    };

    return (
        <div>
            {/* Scan Date Picker */}
            <div className="mb-4">
                <label htmlFor="scanDate" className="form-label">
                    <i className="bi bi-calendar-event me-2"></i>
                    Scan Date & Time
                </label>
                <input
                    type="datetime-local"
                    className="form-control form-control-lg"
                    id="scanDate"
                    value={scanDate}
                    onChange={(e) => setScanDate(e.target.value)}
                    disabled={isUploading}
                    required
                />
                <small className="form-text text-muted">
                    When was this vulnerability scan performed?
                </small>
            </div>

            {/* File Upload Area */}
            <div
                className={`border-2 border-dashed rounded-3 p-5 text-center position-relative ${
                    isDragOver ? 'border-primary bg-primary bg-opacity-10' :
                        selectedFile ? 'border-success bg-success bg-opacity-10' :
                            'border-secondary'
                } ${isUploading ? 'pe-none' : 'cursor-pointer'}`}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                onClick={handleUploadAreaClick}
                style={{ minHeight: '200px', cursor: isUploading ? 'not-allowed' : 'pointer' }}
            >
                <input
                    ref={fileInputRef}
                    type="file"
                    className="d-none"
                    accept=".xlsx,.xls,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel"
                    onChange={handleFileChange}
                    disabled={isUploading}
                />

                {selectedFile ? (
                    <div className="d-flex flex-column align-items-center">
                        <div className="mb-3">
                            <i className="bi bi-file-earmark-excel text-success" style={{ fontSize: '4rem' }}></i>
                        </div>
                        <h4 className="text-success mb-3">File Selected</h4>
                        <div className="bg-white rounded-3 p-4 shadow-sm w-100 max-width-400">
                            <div className="d-flex align-items-center justify-content-between">
                                <div className="d-flex align-items-center">
                                    <i className="bi bi-file-earmark-excel text-success me-3"></i>
                                    <div>
                                        <div className="fw-semibold text-truncate" style={{ maxWidth: '250px' }}>{selectedFile.name}</div>
                                        <small className="text-muted">{formatFileSize(selectedFile.size)}</small>
                                    </div>
                                </div>
                                <button
                                    className="btn btn-outline-secondary"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        setSelectedFile(null);
                                        if (fileInputRef.current) fileInputRef.current.value = '';
                                    }}
                                    disabled={isUploading}
                                >
                                    <i className="bi bi-x"></i>
                                </button>
                            </div>
                        </div>
                        <p className="text-muted mt-3 mb-0">Click to change file or drag and drop a new one</p>
                    </div>
                ) : (
                    <div className="d-flex flex-column align-items-center">
                        <div className="mb-4">
                            <i className={`bi ${isDragOver ? 'bi-cloud-upload-fill text-primary' : 'bi-cloud-upload text-muted'}`} style={{ fontSize: '4rem' }}></i>
                        </div>
                        <h4 className={isDragOver ? 'text-primary' : 'text-dark'}>
                            {isDragOver ? 'Drop your file here' : 'Choose Excel file or drag & drop'}
                        </h4>
                        <p className="text-muted mb-4">
                            Supports .xlsx and .xls files up to 10MB
                        </p>
                        <button className="btn btn-primary btn-lg">
                            <i className="bi bi-folder2-open me-2"></i>Browse Files
                        </button>
                    </div>
                )}
            </div>

            {/* File Requirements */}
            <div className="mt-4">
                <div className="bg-light rounded-3 p-3">
                    <div className="row align-items-center">
                        <div className="col-md-3">
                            <h6 className="mb-0 text-primary">
                                <i className="bi bi-info-circle me-2"></i>File Requirements
                            </h6>
                        </div>
                        <div className="col-md-9">
                            <div className="text-muted small mb-1">Required Columns:</div>
                            <div className="d-flex flex-wrap gap-1">
                                <code className="badge bg-secondary">Hostname</code>
                                <code className="badge bg-secondary">Local IP</code>
                                <code className="badge bg-secondary">Host groups</code>
                                <code className="badge bg-secondary">Cloud service account ID</code>
                                <code className="badge bg-secondary">Cloud service instance ID</code>
                                <code className="badge bg-secondary">OS version</code>
                                <code className="badge bg-secondary">Active Directory domain</code>
                                <code className="badge bg-secondary">Vulnerability ID</code>
                                <code className="badge bg-secondary">CVSS severity</code>
                                <code className="badge bg-secondary">Vulnerable product versions</code>
                                <code className="badge bg-secondary">Days open</code>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Import Summary */}
            {importResponse && (
                <div className="mt-4">
                    <div className="card border-success">
                        <div className="card-header bg-success text-white">
                            <h6 className="mb-0">
                                <i className="bi bi-check-circle me-2"></i>
                                Import Summary
                            </h6>
                        </div>
                        <div className="card-body">
                            <div className="row">
                                <div className="col-md-4">
                                    <p className="mb-2"><strong>Imported:</strong> <span className="badge bg-success">{importResponse.imported}</span></p>
                                </div>
                                <div className="col-md-4">
                                    <p className="mb-2"><strong>Skipped:</strong> <span className="badge bg-warning">{importResponse.skipped}</span></p>
                                </div>
                                <div className="col-md-4">
                                    <p className="mb-2"><strong>Assets Created:</strong> <span className="badge bg-info">{importResponse.assetsCreated}</span></p>
                                </div>
                            </div>

                            {/* Skipped Details */}
                            {importResponse.skippedDetails && importResponse.skippedDetails.length > 0 && (
                                <div className="mt-3">
                                    <h6 className="text-warning">
                                        <i className="bi bi-exclamation-triangle me-2"></i>
                                        Skipped Rows
                                    </h6>
                                    <div className="table-responsive">
                                        <table className="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>Row</th>
                                                    <th>Reason</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {importResponse.skippedDetails.map((detail, index) => (
                                                    <tr key={index}>
                                                        <td>{detail.row}</td>
                                                        <td>{detail.reason}</td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {/* Upload Button */}
            <div className="mt-5 d-grid">
                <button
                    className="btn btn-primary btn-lg py-3"
                    onClick={handleUpload}
                    disabled={!selectedFile || !scanDate || isUploading}
                >
                    {isUploading ? (
                        <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Processing File...
                        </>
                    ) : (
                        <>
                            <i className="bi bi-cloud-upload-fill me-2"></i>
                            Import Vulnerabilities
                        </>
                    )}
                </button>
            </div>

            {/* Status Messages */}
            {uploadStatus && (
                <div className={`alert mt-4 ${uploadStatus.startsWith('Error:') ? 'alert-danger' : 'alert-success'}`} role="alert">
                    <div className="d-flex align-items-center">
                        <i className={`bi ${uploadStatus.startsWith('Error:') ? 'bi-exclamation-triangle' : 'bi-check-circle'} me-2`}></i>
                        {uploadStatus}
                    </div>
                </div>
            )}
        </div>
    );
};

export default VulnerabilityImportForm;
