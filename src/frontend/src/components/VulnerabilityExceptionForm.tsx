/**
 * Vulnerability Exception Form Component
 *
 * Form for creating and editing vulnerability exceptions
 *
 * Features:
 * - Exception type selection (IP/PRODUCT)
 * - Target value input with validation
 * - Expiration date picker
 * - Reason textarea
 * - Form validation
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */

import React, { useState, useEffect } from 'react';
import {
    createException,
    updateException,
    type VulnerabilityException,
    type CreateExceptionRequest,
    type UpdateExceptionRequest
} from '../services/vulnerabilityManagementService';

interface VulnerabilityExceptionFormProps {
    exception?: VulnerabilityException;
    onSave: () => void;
    onCancel: () => void;
}

const VulnerabilityExceptionForm: React.FC<VulnerabilityExceptionFormProps> = ({
    exception,
    onSave,
    onCancel
}) => {
    const [exceptionType, setExceptionType] = useState<string>(exception?.exceptionType || 'IP');
    const [targetValue, setTargetValue] = useState<string>(exception?.targetValue || '');
    const [expirationDate, setExpirationDate] = useState<string>(() => {
        if (exception?.expirationDate) {
            // Convert ISO string to datetime-local format
            return exception.expirationDate.slice(0, 16);
        }
        // Default to 30 days from now
        const future = new Date();
        future.setDate(future.getDate() + 30);
        return future.toISOString().slice(0, 16);
    });
    const [reason, setReason] = useState<string>(exception?.reason || '');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const isEditMode = !!exception;

    const validateIPAddress = (ip: string): boolean => {
        const ipPattern = /^(\d{1,3}\.){3}\d{1,3}$/;
        if (!ipPattern.test(ip)) return false;

        const parts = ip.split('.');
        return parts.every(part => {
            const num = parseInt(part, 10);
            return num >= 0 && num <= 255;
        });
    };

    const validateForm = (): boolean => {
        if (!targetValue.trim()) {
            setError('Target value is required');
            return false;
        }

        if (exceptionType === 'IP' && !validateIPAddress(targetValue)) {
            setError('Invalid IP address format');
            return false;
        }

        if (!expirationDate) {
            setError('Expiration date is required');
            return false;
        }

        if (!reason.trim()) {
            setError('Reason is required');
            return false;
        }

        return true;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null);

        if (!validateForm()) {
            return;
        }

        setIsSubmitting(true);

        try {
            if (isEditMode) {
                // Update existing exception
                const request: UpdateExceptionRequest = {
                    expirationDate: new Date(expirationDate).toISOString(),
                    reason: reason.trim()
                };
                await updateException(exception.id, request);
            } else {
                // Create new exception
                const request: CreateExceptionRequest = {
                    exceptionType,
                    targetValue: targetValue.trim(),
                    expirationDate: new Date(expirationDate).toISOString(),
                    reason: reason.trim()
                };
                await createException(request);
            }

            onSave();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to save exception');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            {error && (
                <div className="alert alert-danger" role="alert">
                    <i className="bi bi-exclamation-triangle me-2"></i>
                    {error}
                </div>
            )}

            {/* Exception Type (only for new exceptions) */}
            {!isEditMode && (
                <div className="mb-3">
                    <label className="form-label">Exception Type *</label>
                    <div className="d-flex gap-3">
                        <div className="form-check">
                            <input
                                className="form-check-input"
                                type="radio"
                                name="exceptionType"
                                id="typeIP"
                                value="IP"
                                checked={exceptionType === 'IP'}
                                onChange={(e) => setExceptionType(e.target.value)}
                                disabled={isSubmitting}
                            />
                            <label className="form-check-label" htmlFor="typeIP">
                                IP Address
                            </label>
                        </div>
                        <div className="form-check">
                            <input
                                className="form-check-input"
                                type="radio"
                                name="exceptionType"
                                id="typePRODUCT"
                                value="PRODUCT"
                                checked={exceptionType === 'PRODUCT'}
                                onChange={(e) => setExceptionType(e.target.value)}
                                disabled={isSubmitting}
                            />
                            <label className="form-check-label" htmlFor="typePRODUCT">
                                Product
                            </label>
                        </div>
                    </div>
                    <small className="form-text text-muted">
                        Choose whether to except by IP address or product name
                    </small>
                </div>
            )}

            {/* Target Value (only for new exceptions) */}
            {!isEditMode && (
                <div className="mb-3">
                    <label htmlFor="targetValue" className="form-label">
                        {exceptionType === 'IP' ? 'IP Address' : 'Product Name'} *
                    </label>
                    <input
                        type="text"
                        className="form-control"
                        id="targetValue"
                        value={targetValue}
                        onChange={(e) => setTargetValue(e.target.value)}
                        placeholder={exceptionType === 'IP' ? 'e.g., 192.168.1.100' : 'e.g., Apache HTTP Server'}
                        disabled={isSubmitting}
                        required
                    />
                    {exceptionType === 'IP' && (
                        <small className="form-text text-muted">
                            Enter a valid IPv4 address
                        </small>
                    )}
                </div>
            )}

            {/* Expiration Date */}
            <div className="mb-3">
                <label htmlFor="expirationDate" className="form-label">
                    Expiration Date *
                </label>
                <input
                    type="datetime-local"
                    className="form-control"
                    id="expirationDate"
                    value={expirationDate}
                    onChange={(e) => setExpirationDate(e.target.value)}
                    disabled={isSubmitting}
                    required
                />
                <small className="form-text text-muted">
                    When should this exception expire?
                </small>
            </div>

            {/* Reason */}
            <div className="mb-3">
                <label htmlFor="reason" className="form-label">
                    Reason *
                </label>
                <textarea
                    className="form-control"
                    id="reason"
                    rows={4}
                    value={reason}
                    onChange={(e) => setReason(e.target.value)}
                    placeholder="Explain why this exception is needed..."
                    disabled={isSubmitting}
                    required
                />
            </div>

            {/* Form Actions */}
            <div className="d-flex justify-content-end gap-2">
                <button
                    type="button"
                    className="btn btn-secondary"
                    onClick={onCancel}
                    disabled={isSubmitting}
                >
                    Cancel
                </button>
                <button
                    type="submit"
                    className="btn btn-primary"
                    disabled={isSubmitting}
                >
                    {isSubmitting ? (
                        <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            {isEditMode ? 'Updating...' : 'Creating...'}
                        </>
                    ) : (
                        <>
                            <i className={`bi ${isEditMode ? 'bi-check-lg' : 'bi-plus-lg'} me-2`}></i>
                            {isEditMode ? 'Update Exception' : 'Create Exception'}
                        </>
                    )}
                </button>
            </div>
        </form>
    );
};

export default VulnerabilityExceptionForm;
