/**
 * Vulnerability Exception Form Component
 *
 * Form for creating and editing vulnerability exceptions
 *
 * Features:
 * - Exception type selection (IP/PRODUCT/ASSET)
 * - Target value input with validation
 * - Asset selector for ASSET exceptions
 * - Product autocomplete for PRODUCT exceptions (Phase 3)
 * - Expiration date picker (required)
 * - Reason textarea
 * - Form validation
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 * Related to: Feature 021-vulnerability-overdue-exception-logic (ASSET support, Phase 3 autocomplete)
 */

import React, { useState, useEffect } from 'react';
import {
    createException,
    updateException,
    getAssets,
    previewExceptionImpact,
    type VulnerabilityException,
    type CreateExceptionRequest,
    type UpdateExceptionRequest,
    type Asset,
    type ExceptionImpactPreview
} from '../services/vulnerabilityManagementService';
import ProductAutocomplete from './ProductAutocomplete';
import ImpactPreviewModal from './ImpactPreviewModal';

interface VulnerabilityExceptionFormProps {
    exception?: VulnerabilityException;
    onSave: () => void;
    onCancel: () => void;
}

const VulnerabilityExceptionForm: React.FC<VulnerabilityExceptionFormProps> = ({
    exception,
    onSave,
    onCancel
}) => {
    const [exceptionType, setExceptionType] = useState<string>(exception?.exceptionType || 'IP');
    const [targetValue, setTargetValue] = useState<string>(exception?.targetValue || '');
    const [selectedAssetId, setSelectedAssetId] = useState<number | null>(exception?.assetId || null);
    const [expirationDate, setExpirationDate] = useState<string>(() => {
        if (exception?.expirationDate) {
            // Convert ISO string to datetime-local format
            return exception.expirationDate.slice(0, 16);
        }
        // Default to 30 days from now
        const future = new Date();
        future.setDate(future.getDate() + 30);
        return future.toISOString().slice(0, 16);
    });
    const [reason, setReason] = useState<string>(exception?.reason || '');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [assets, setAssets] = useState<Asset[]>([]);
    const [loadingAssets, setLoadingAssets] = useState(false);

    // Phase 3: Impact preview state
    const [showPreview, setShowPreview] = useState(false);
    const [impactPreview, setImpactPreview] = useState<ExceptionImpactPreview | null>(null);
    const [loadingPreview, setLoadingPreview] = useState(false);

    const isEditMode = !!exception;

    // Fetch assets when component mounts or when ASSET type is selected
    useEffect(() => {
        if (exceptionType === 'ASSET') {
            fetchAssets();
        }
    }, [exceptionType]);

    const fetchAssets = async () => {
        try {
            setLoadingAssets(true);
            const data = await getAssets();
            setAssets(data);
        } catch (err) {
            console.error('Failed to fetch assets:', err);
            setError('Failed to load assets. Please try again.');
        } finally {
            setLoadingAssets(false);
        }
    };

    const validateIPAddress = (ip: string): boolean => {
        const ipPattern = /^(\d{1,3}\.){3}\d{1,3}$/;
        if (!ipPattern.test(ip)) return false;

        const parts = ip.split('.');
        return parts.every(part => {
            const num = parseInt(part, 10);
            return num >= 0 && num <= 255;
        });
    };

    const validateForm = (): boolean => {
        if (exceptionType === 'ASSET') {
            if (!selectedAssetId) {
                setError('Please select an asset');
                return false;
            }
            // For ASSET type, targetValue should be the asset name
            const selectedAsset = assets.find(a => a.id === selectedAssetId);
            if (!selectedAsset) {
                setError('Selected asset not found');
                return false;
            }
        } else {
            if (!targetValue.trim()) {
                setError('Target value is required');
                return false;
            }

            if (exceptionType === 'IP' && !validateIPAddress(targetValue)) {
                setError('Invalid IP address format');
                return false;
            }
        }

        if (!expirationDate) {
            setError('Expiration date is required');
            return false;
        }

        if (!reason.trim()) {
            setError('Reason is required');
            return false;
        }

        return true;
    };

    // Phase 3: Handle preview impact
    const handlePreviewImpact = async () => {
        setError(null);

        // Basic validation before preview
        if (exceptionType === 'ASSET' && !selectedAssetId) {
            setError('Please select an asset');
            return;
        }
        if (exceptionType !== 'ASSET' && !targetValue.trim()) {
            setError('Target value is required');
            return;
        }

        setLoadingPreview(true);

        try {
            const preview = await previewExceptionImpact({
                exceptionType,
                targetValue: targetValue.trim(),
                assetId: exceptionType === 'ASSET' ? selectedAssetId : null
            });

            setImpactPreview(preview);
            setShowPreview(true);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to preview impact');
        } finally {
            setLoadingPreview(false);
        }
    };

    // Phase 3: Create exception after preview confirmation
    const handleConfirmAndCreate = async () => {
        if (!validateForm()) {
            setShowPreview(false);
            return;
        }

        setIsSubmitting(true);

        try {
            // Create new exception
            let finalTargetValue = targetValue.trim();
            let finalAssetId = null;

            if (exceptionType === 'ASSET') {
                const selectedAsset = assets.find(a => a.id === selectedAssetId);
                if (selectedAsset) {
                    finalTargetValue = selectedAsset.name;
                    finalAssetId = selectedAsset.id;
                }
            }

            const request: CreateExceptionRequest = {
                exceptionType,
                targetValue: finalTargetValue,
                expirationDate: new Date(expirationDate).toISOString(),
                reason: reason.trim(),
                assetId: finalAssetId
            };
            await createException(request);

            setShowPreview(false);
            onSave();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to save exception');
            setShowPreview(false);
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null);

        if (!validateForm()) {
            return;
        }

        // Phase 3: For new exceptions, show preview first
        if (!isEditMode) {
            await handlePreviewImpact();
            return;
        }

        // For edit mode, proceed directly
        setIsSubmitting(true);

        try {
            // Update existing exception
            const request: UpdateExceptionRequest = {
                expirationDate: new Date(expirationDate).toISOString(),
                reason: reason.trim()
            };
            await updateException(exception.id, request);

            onSave();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to save exception');
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleTypeChange = (newType: string) => {
        setExceptionType(newType);
        setTargetValue('');
        setSelectedAssetId(null);
        setError(null);
    };


    return (
        <>
        <form onSubmit={handleSubmit}>
            {error && (
                <div className="alert alert-danger alert-dismissible fade show" role="alert">
                    <i className="bi bi-exclamation-triangle me-2"></i>
                    {error}
                    <button type="button" className="btn-close" onClick={() => setError(null)} aria-label="Close"></button>
                </div>
            )}

            {/* Exception Type (only for new exceptions) */}
            {!isEditMode && (
                <div className="mb-4">
                    <label className="form-label fw-bold">
                        Exception Type *
                        <i 
                            className="bi bi-question-circle ms-2 text-muted" 
                            data-bs-toggle="tooltip" 
                            title="Choose how to target this exception"
                            style={{ cursor: 'help', fontSize: '0.875rem' }}
                        ></i>
                    </label>
                    <div className="d-flex gap-4">
                        <div className="form-check">
                            <input
                                className="form-check-input"
                                type="radio"
                                name="exceptionType"
                                id="typeIP"
                                value="IP"
                                checked={exceptionType === 'IP'}
                                onChange={(e) => handleTypeChange(e.target.value)}
                                disabled={isSubmitting}
                            />
                            <label className="form-check-label" htmlFor="typeIP">
                                <strong>IP Address</strong>
                                <br />
                                <small className="text-muted">All vulnerabilities on this IP</small>
                            </label>
                        </div>
                        <div className="form-check">
                            <input
                                className="form-check-input"
                                type="radio"
                                name="exceptionType"
                                id="typePRODUCT"
                                value="PRODUCT"
                                checked={exceptionType === 'PRODUCT'}
                                onChange={(e) => handleTypeChange(e.target.value)}
                                disabled={isSubmitting}
                            />
                            <label className="form-check-label" htmlFor="typePRODUCT">
                                <strong>Product</strong>
                                <br />
                                <small className="text-muted">Vulnerabilities matching product name</small>
                            </label>
                        </div>
                        <div className="form-check">
                            <input
                                className="form-check-input"
                                type="radio"
                                name="exceptionType"
                                id="typeASSET"
                                value="ASSET"
                                checked={exceptionType === 'ASSET'}
                                onChange={(e) => handleTypeChange(e.target.value)}
                                disabled={isSubmitting}
                            />
                            <label className="form-check-label" htmlFor="typeASSET">
                                <strong>Asset</strong>
                                <br />
                                <small className="text-muted">All vulnerabilities on specific asset</small>
                            </label>
                        </div>
                    </div>
                    <div className="alert alert-info mt-3 mb-0" role="alert">
                        <small>
                            <i className="bi bi-lightbulb me-2"></i>
                            {exceptionType === 'IP' && 'IP exceptions apply to all vulnerabilities on the specified IP address.'}
                            {exceptionType === 'PRODUCT' && 'Product exceptions apply to all vulnerabilities matching the product name/version.'}
                            {exceptionType === 'ASSET' && 'Asset exceptions apply to all vulnerabilities on the specific asset, even if its IP changes.'}
                        </small>
                    </div>
                </div>
            )}

            {/* Conditional Forms Based on Type */}
            {!isEditMode && (
                <>
                    {/* Asset Selector for ASSET type */}
                    {exceptionType === 'ASSET' && (
                        <div className="mb-3">
                            <label htmlFor="assetSelect" className="form-label">
                                Select Asset *
                            </label>
                            {loadingAssets ? (
                                <div className="text-center py-3">
                                    <div className="spinner-border spinner-border-sm" role="status">
                                        <span className="visually-hidden">Loading assets...</span>
                                    </div>
                                    <span className="ms-2">Loading assets...</span>
                                </div>
                            ) : (
                                <select
                                    className="form-select"
                                    id="assetSelect"
                                    value={selectedAssetId || ''}
                                    onChange={(e) => setSelectedAssetId(Number(e.target.value) || null)}
                                    disabled={isSubmitting}
                                    required
                                >
                                    <option value="">-- Select an asset --</option>
                                    {assets.map(asset => (
                                        <option key={asset.id} value={asset.id}>
                                            {asset.name} {asset.ip ? `(${asset.ip})` : ''}
                                        </option>
                                    ))}
                                </select>
                            )}
                            <small className="form-text text-muted">
                                {assets.length} asset(s) available. Exception will apply to all vulnerabilities on this asset.
                            </small>
                        </div>
                    )}

                    {/* IP Input for IP type */}
                    {exceptionType === 'IP' && (
                        <div className="mb-3">
                            <label htmlFor="targetValue" className="form-label">
                                IP Address *
                            </label>
                            <input
                                type="text"
                                className="form-control"
                                id="targetValue"
                                value={targetValue}
                                onChange={(e) => setTargetValue(e.target.value)}
                                placeholder="e.g., 192.168.1.100"
                                disabled={isSubmitting}
                                required
                            />
                            <small className="form-text text-muted">
                                Enter a valid IPv4 address (e.g., 10.0.0.1)
                            </small>
                        </div>
                    )}

                    {/* Product Input for PRODUCT type - Phase 3: Now with autocomplete */}
                    {exceptionType === 'PRODUCT' && (
                        <div className="mb-3">
                            <label htmlFor="targetValue" className="form-label">
                                Product Name/Version *
                                <i 
                                    className="bi bi-question-circle ms-2 text-muted" 
                                    data-bs-toggle="tooltip" 
                                    title="Start typing to see suggestions from existing vulnerabilities"
                                    style={{ cursor: 'help', fontSize: '0.875rem' }}
                                ></i>
                            </label>
                            <ProductAutocomplete
                                value={targetValue}
                                onChange={setTargetValue}
                                placeholder="e.g., Apache HTTP Server 2.4.41"
                                disabled={isSubmitting}
                            />
                            <small className="form-text text-muted">
                                Product name or version - partial matches supported. Select from suggestions or enter custom value.
                            </small>
                        </div>
                    )}
                </>
            )}

            {/* Expiration Date */}
            <div className="mb-3">
                <label htmlFor="expirationDate" className="form-label">
                    Expiration Date *
                    <i 
                        className="bi bi-question-circle ms-2 text-muted" 
                        data-bs-toggle="tooltip" 
                        title="All exceptions require an end date for periodic review"
                        style={{ cursor: 'help', fontSize: '0.875rem' }}
                    ></i>
                </label>
                <input
                    type="datetime-local"
                    className="form-control"
                    id="expirationDate"
                    value={expirationDate}
                    onChange={(e) => setExpirationDate(e.target.value)}
                    disabled={isSubmitting}
                    required
                />
                <small className="form-text text-muted">
                    When should this exception expire? Default is 30 days from now.
                </small>
            </div>

            {/* Reason */}
            <div className="mb-3">
                <label htmlFor="reason" className="form-label">
                    Justification / Reason *
                </label>
                <textarea
                    className="form-control"
                    id="reason"
                    rows={4}
                    value={reason}
                    onChange={(e) => setReason(e.target.value)}
                    placeholder="Explain why this exception is needed (e.g., planned maintenance, false positive, accepted risk)..."
                    disabled={isSubmitting}
                    required
                    maxLength={1024}
                />
                <small className="form-text text-muted">
                    {reason.length}/1024 characters
                </small>
            </div>

            {/* Form Actions */}
            <div className="d-flex justify-content-end gap-2 mt-4">
                <button
                    type="button"
                    className="btn btn-secondary"
                    onClick={onCancel}
                    disabled={isSubmitting}
                >
                    <i className="bi bi-x-lg me-2"></i>
                    Cancel
                </button>
                <button
                    type="submit"
                    className="btn btn-primary"
                                    disabled={isSubmitting || (exceptionType === 'ASSET' && loadingAssets) || loadingPreview}
                >
                    {loadingPreview ? (
                        <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Loading preview...
                        </>
                    ) : isSubmitting ? (
                        <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            {isEditMode ? 'Updating...' : 'Creating...'}
                        </>
                    ) : (
                        <>
                            <i className={`bi ${isEditMode ? 'bi-check-lg' : 'bi-eye'} me-2`}></i>
                            {isEditMode ? 'Update Exception' : 'Preview & Create'}
                        </>
                    )}
                </button>
            </div>
        </form>

        {/* Phase 3: Impact Preview Modal */}
        {!isEditMode && impactPreview && (
            <ImpactPreviewModal
                show={showPreview}
                onClose={() => setShowPreview(false)}
                onConfirm={handleConfirmAndCreate}
                exceptionType={exceptionType}
                targetValue={targetValue}
                totalCount={impactPreview.totalCount}
                sampleSize={impactPreview.sampleSize}
                countBySeverity={impactPreview.countBySeverity}
                isSubmitting={isSubmitting}
            />
        )}
    </>
    );
};

export default VulnerabilityExceptionForm;
