/**
 * CrowdStrike Vulnerability Lookup Component
 *
 * Enables real-time querying of CrowdStrike Falcon API for system vulnerabilities
 *
 * Features:
 * - Search form with hostname input
 * - Results table matching CurrentVulnerabilitiesTable design
 * - Filter by severity, exception status, product
 * - Sortable columns
 * - Save to database functionality
 * - Loading and error states
 *
 * Related to: Feature 015-we-have-currently (CrowdStrike System Vulnerability Lookup)
 * Tasks: T031-T036 [US1-Impl], T055-T058 [US3-Impl]
 */

import React, { useState } from 'react';
import {
    queryVulnerabilities,
    saveVulnerabilities,
    type CrowdStrikeQueryResponse,
    type CrowdStrikeVulnerabilityDto
} from '../services/crowdstrikeService';

const CrowdStrikeVulnerabilityLookup: React.FC = () => {
    // Search state
    const [hostname, setHostname] = useState<string>('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [queryResponse, setQueryResponse] = useState<CrowdStrikeQueryResponse | null>(null);

    // Filter states
    const [severityFilter, setSeverityFilter] = useState<string>('');
    const [exceptionFilter, setExceptionFilter] = useState<string>('');
    const [productFilter, setProductFilter] = useState<string>('');

    // Sort states
    const [sortField, setSortField] = useState<string>('detectedAt');
    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

    // Save state
    const [saving, setSaving] = useState(false);
    const [saveSuccess, setSaveSuccess] = useState<string | null>(null);

    /**
     * Handle search form submission
     * Task: T033 [US1-Impl]
     */
    const handleSearch = async (e?: React.FormEvent) => {
        if (e) e.preventDefault();

        // Validate hostname
        if (!hostname.trim()) {
            setError('Please enter a hostname');
            return;
        }

        console.log('[CrowdStrikeVulnerabilityLookup] handleSearch called:', hostname);
        setLoading(true);
        setError(null);
        setQueryResponse(null);
        setSaveSuccess(null);

        try {
            const response = await queryVulnerabilities(hostname.trim());
            console.log('[CrowdStrikeVulnerabilityLookup] Query successful:', response);
            setQueryResponse(response);
            setError(null);
        } catch (err) {
            console.error('[CrowdStrikeVulnerabilityLookup] Query failed:', err);
            setError(err instanceof Error ? err.message : 'Failed to query CrowdStrike');
            setQueryResponse(null);
        } finally {
            setLoading(false);
        }
    };

    /**
     * Handle refresh button click
     * Task: T061 [US4-Impl]
     */
    const handleRefresh = () => {
        console.log('[CrowdStrikeVulnerabilityLookup] handleRefresh called');
        handleSearch();
    };

    /**
     * Handle save to database
     * Task: T057 [US3-Impl]
     */
    const handleSave = async () => {
        if (!queryResponse || queryResponse.vulnerabilities.length === 0) {
            setError('No vulnerabilities to save');
            return;
        }

        console.log('[CrowdStrikeVulnerabilityLookup] handleSave called');
        setSaving(true);
        setError(null);
        setSaveSuccess(null);

        try {
            const response = await saveVulnerabilities({
                hostname: queryResponse.hostname,
                vulnerabilities: queryResponse.vulnerabilities
            });
            console.log('[CrowdStrikeVulnerabilityLookup] Save successful:', response);

            // T014: Update success message to show saved, skipped, and created counts
            const parts = [];
            if (response.vulnerabilitiesSaved > 0) {
                parts.push(`${response.vulnerabilitiesSaved} vulnerabilities saved`);
            }
            if (response.vulnerabilitiesSkipped > 0) {
                parts.push(`${response.vulnerabilitiesSkipped} skipped`);
            }
            if (response.assetsCreated > 0) {
                parts.push(`${response.assetsCreated} asset created`);
            }

            const successMessage = parts.length > 0
                ? `Success: ${parts.join(', ')} for ${queryResponse.hostname}`
                : response.message;

            setSaveSuccess(successMessage);

            // T015: If there are warnings/errors in the response, append them
            if (response.errors && response.errors.length > 0) {
                const errorSummary = response.errors.slice(0, 5).join('; ');
                const moreErrors = response.errors.length > 5 ? ` (and ${response.errors.length - 5} more...)` : '';
                setError(`Warnings: ${errorSummary}${moreErrors}`);
            }

            // Auto-dismiss success message after 5 seconds
            setTimeout(() => setSaveSuccess(null), 5000);
        } catch (err) {
            console.error('[CrowdStrikeVulnerabilityLookup] Save failed:', err);
            setError(err instanceof Error ? err.message : 'Failed to save vulnerabilities');
        } finally {
            setSaving(false);
        }
    };

    /**
     * Get filtered vulnerabilities
     * Task: T039 [US2-Impl]
     */
    const getFilteredVulnerabilities = (): CrowdStrikeVulnerabilityDto[] => {
        if (!queryResponse) return [];

        return queryResponse.vulnerabilities.filter(vuln => {
            // Severity filter
            if (severityFilter && vuln.severity !== severityFilter) return false;

            // Exception filter
            if (exceptionFilter === 'EXCEPTED' && !vuln.hasException) return false;
            if (exceptionFilter === 'NOT_EXCEPTED' && vuln.hasException) return false;

            // Product filter
            if (productFilter && !vuln.affectedProduct?.toLowerCase().includes(productFilter.toLowerCase())) {
                return false;
            }

            return true;
        });
    };

    /**
     * Get sorted vulnerabilities
     * Task: T043 [US2-Impl]
     */
    const getSortedVulnerabilities = (filtered: CrowdStrikeVulnerabilityDto[]): CrowdStrikeVulnerabilityDto[] => {
        return [...filtered].sort((a, b) => {
            let aVal: any;
            let bVal: any;

            // Handle sorting for different field types
            if (sortField === 'severity') {
                // Custom severity order
                const severityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1, 'Informational': 0 };
                aVal = severityOrder[a.severity as keyof typeof severityOrder] || 0;
                bVal = severityOrder[b.severity as keyof typeof severityOrder] || 0;
            } else if (sortField === 'daysOpen') {
                // Parse "X days" string to number
                aVal = parseInt(a.daysOpen?.split(' ')[0] || '0');
                bVal = parseInt(b.daysOpen?.split(' ')[0] || '0');
            } else if (sortField === 'detectedAt') {
                aVal = new Date(a.detectedAt).getTime();
                bVal = new Date(b.detectedAt).getTime();
            } else {
                aVal = (a as any)[sortField];
                bVal = (b as any)[sortField];
            }

            if (aVal === null || aVal === undefined) return 1;
            if (bVal === null || bVal === undefined) return -1;

            const comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
            return sortOrder === 'asc' ? comparison : -comparison;
        });
    };

    /**
     * Handle sort
     * Task: T041 [US2-Impl]
     */
    const handleSort = (field: string) => {
        if (sortField === field) {
            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
        } else {
            setSortField(field);
            setSortOrder('asc');
        }
    };

    /**
     * Get severity badge class
     * Task: T035 [US1-Impl]
     */
    const getSeverityBadgeClass = (severity: string): string => {
        const sev = severity.toLowerCase();
        if (sev.includes('critical')) return 'bg-danger';
        if (sev.includes('high')) return 'bg-warning text-dark';
        if (sev.includes('medium')) return 'bg-info text-dark';
        if (sev.includes('low')) return 'bg-success';
        return 'bg-secondary';
    };

    /**
     * Get exception badge
     * Task: T036 [US1-Impl]
     */
    const getExceptionBadge = (hasException: boolean, reason: string | null) => {
        if (hasException) {
            return (
                <span
                    className="badge bg-success"
                    title={reason || "This vulnerability is excepted"}
                >
                    Excepted
                </span>
            );
        }
        return <span className="badge bg-danger" title="No active exception">Not Excepted</span>;
    };

    /**
     * Sort icon component
     * Task: T042 [US2-Impl]
     */
    const SortIcon: React.FC<{ field: string }> = ({ field }) => {
        if (sortField !== field) return <i className="bi bi-chevron-expand ms-1 text-muted"></i>;
        return sortOrder === 'asc' ?
            <i className="bi bi-chevron-up ms-1"></i> :
            <i className="bi bi-chevron-down ms-1"></i>;
    };

    const filteredVulnerabilities = getFilteredVulnerabilities();
    const sortedVulnerabilities = getSortedVulnerabilities(filteredVulnerabilities);
    const totalCount = queryResponse?.totalCount || 0;
    const filteredCount = filteredVulnerabilities.length;

    return (
        <div className="container-fluid p-4">
            <div className="row">
                <div className="col-12">
                    <div className="d-flex justify-content-between align-items-center mb-4">
                        <h2>
                            <i className="bi bi-cloud-check me-2"></i>
                            CrowdStrike Vulnerability Lookup
                        </h2>
                    </div>
                </div>
            </div>

            {/* Search Form - Task: T032 [US1-Impl] */}
            <div className="row mb-4">
                <div className="col-12">
                    <div className="card">
                        <div className="card-body">
                            <h5 className="card-title">Query CrowdStrike Falcon</h5>
                            <form onSubmit={handleSearch}>
                                <div className="row g-3 align-items-end">
                                    <div className="col-md-6">
                                        <label htmlFor="hostname" className="form-label">
                                            System Hostname <span className="text-danger">*</span>
                                        </label>
                                        <input
                                            type="text"
                                            id="hostname"
                                            className="form-control"
                                            placeholder="e.g., web-server-01"
                                            value={hostname}
                                            onChange={(e) => setHostname(e.target.value)}
                                            required
                                            maxLength={255}
                                            disabled={loading}
                                        />
                                        <small className="form-text text-muted">
                                            Enter the hostname as it appears in CrowdStrike Falcon
                                        </small>
                                    </div>
                                    <div className="col-md-6">
                                        <div className="d-flex gap-2">
                                            <button
                                                type="submit"
                                                className="btn btn-primary"
                                                disabled={loading || !hostname.trim()}
                                            >
                                                {loading ? (
                                                    <>
                                                        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                        Searching...
                                                    </>
                                                ) : (
                                                    <>
                                                        <i className="bi bi-search me-2"></i>
                                                        Search
                                                    </>
                                                )}
                                            </button>

                                            {/* Refresh Button - Task: T060 [US4-Impl] */}
                                            {queryResponse && (
                                                <button
                                                    type="button"
                                                    className="btn btn-outline-primary"
                                                    onClick={handleRefresh}
                                                    disabled={loading}
                                                >
                                                    <i className="bi bi-arrow-clockwise me-2"></i>
                                                    Refresh
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            {/* Error Alert */}
            {error && (
                <div className="row mb-4">
                    <div className="col-12">
                        <div className="alert alert-danger alert-dismissible fade show" role="alert">
                            <i className="bi bi-exclamation-triangle me-2"></i>
                            {error}
                            <button
                                type="button"
                                className="btn-close"
                                onClick={() => setError(null)}
                                aria-label="Close"
                            ></button>
                        </div>
                    </div>
                </div>
            )}

            {/* Success Alert - Task: T058 [US3-Impl] */}
            {saveSuccess && (
                <div className="row mb-4">
                    <div className="col-12">
                        <div className="alert alert-success alert-dismissible fade show" role="alert">
                            <i className="bi bi-check-circle me-2"></i>
                            {saveSuccess}
                            <button
                                type="button"
                                className="btn-close"
                                onClick={() => setSaveSuccess(null)}
                                aria-label="Close"
                            ></button>
                        </div>
                    </div>
                </div>
            )}

            {/* Results Section - Task: T034 [US1-Impl] */}
            {queryResponse && (
                <>
                    {/* Filters - Task: T038 [US2-Impl] */}
                    <div className="row mb-4">
                        <div className="col-md-4">
                            <label htmlFor="severityFilter" className="form-label">Severity</label>
                            <select
                                id="severityFilter"
                                className="form-select"
                                value={severityFilter}
                                onChange={(e) => setSeverityFilter(e.target.value)}
                            >
                                <option value="">All Severities</option>
                                <option value="Critical">Critical</option>
                                <option value="High">High</option>
                                <option value="Medium">Medium</option>
                                <option value="Low">Low</option>
                            </select>
                        </div>
                        <div className="col-md-4">
                            <label htmlFor="exceptionFilter" className="form-label">Exception Status</label>
                            <select
                                id="exceptionFilter"
                                className="form-select"
                                value={exceptionFilter}
                                onChange={(e) => setExceptionFilter(e.target.value)}
                            >
                                <option value="">All Statuses</option>
                                <option value="EXCEPTED">Excepted</option>
                                <option value="NOT_EXCEPTED">Not Excepted</option>
                            </select>
                        </div>
                        <div className="col-md-4">
                            <label htmlFor="productFilter" className="form-label">Product</label>
                            <input
                                type="text"
                                id="productFilter"
                                className="form-control"
                                placeholder="Filter by product..."
                                value={productFilter}
                                onChange={(e) => setProductFilter(e.target.value)}
                            />
                        </div>
                    </div>

                    {/* Results Table */}
                    <div className="row">
                        <div className="col-12">
                            <div className="card">
                                <div className="card-body">
                                    <div className="d-flex justify-content-between align-items-center mb-3">
                                        <h5 className="card-title mb-0">
                                            Vulnerabilities for {queryResponse.hostname}
                                            {filteredCount !== totalCount && (
                                                <span className="text-muted ms-2">
                                                    (Showing {filteredCount} of {totalCount})
                                                </span>
                                            )}
                                            {filteredCount === totalCount && (
                                                <span className="text-muted ms-2">
                                                    ({totalCount} total)
                                                </span>
                                            )}
                                        </h5>

                                        {/* Save Button - Task: T055 [US3-Impl] */}
                                        {sortedVulnerabilities.length > 0 && (
                                            <button
                                                className="btn btn-primary"
                                                onClick={handleSave}
                                                disabled={saving}
                                            >
                                                {saving ? (
                                                    <>
                                                        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                        Saving...
                                                    </>
                                                ) : (
                                                    <>
                                                        <i className="bi bi-database-add me-2"></i>
                                                        Save to Database
                                                    </>
                                                )}
                                            </button>
                                        )}
                                    </div>

                                    {sortedVulnerabilities.length === 0 ? (
                                        <p className="text-muted">
                                            {queryResponse.vulnerabilities.length === 0
                                                ? 'No vulnerabilities found for this system.'
                                                : 'No vulnerabilities match the current filters.'}
                                        </p>
                                    ) : (
                                        <div className="table-responsive">
                                            <table className="table table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        <th
                                                            onClick={() => handleSort('cveId')}
                                                            style={{ cursor: 'pointer' }}
                                                        >
                                                            CVE
                                                            <SortIcon field="cveId" />
                                                        </th>
                                                        <th
                                                            onClick={() => handleSort('severity')}
                                                            style={{ cursor: 'pointer' }}
                                                        >
                                                            Severity
                                                            <SortIcon field="severity" />
                                                        </th>
                                                        <th
                                                            onClick={() => handleSort('affectedProduct')}
                                                            style={{ cursor: 'pointer' }}
                                                        >
                                                            Product
                                                            <SortIcon field="affectedProduct" />
                                                        </th>
                                                        <th
                                                            onClick={() => handleSort('daysOpen')}
                                                            style={{ cursor: 'pointer' }}
                                                        >
                                                            Days Open
                                                            <SortIcon field="daysOpen" />
                                                        </th>
                                                        <th
                                                            onClick={() => handleSort('detectedAt')}
                                                            style={{ cursor: 'pointer' }}
                                                        >
                                                            Scan Date
                                                            <SortIcon field="detectedAt" />
                                                        </th>
                                                        <th
                                                            onClick={() => handleSort('hasException')}
                                                            style={{ cursor: 'pointer' }}
                                                        >
                                                            Exception
                                                            <SortIcon field="hasException" />
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {sortedVulnerabilities.map((vuln) => (
                                                        <tr key={vuln.id}>
                                                            <td>
                                                                <code>{vuln.cveId || '-'}</code>
                                                            </td>
                                                            <td>
                                                                <span className={`badge ${getSeverityBadgeClass(vuln.severity)}`}>
                                                                    {vuln.severity}
                                                                </span>
                                                            </td>
                                                            <td style={{ maxWidth: '200px', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                                                                {vuln.affectedProduct || '-'}
                                                            </td>
                                                            <td>{vuln.daysOpen || '-'}</td>
                                                            <td>
                                                                {vuln.detectedAt ?
                                                                    new Date(vuln.detectedAt).toLocaleDateString() : '-'}
                                                            </td>
                                                            <td>
                                                                {getExceptionBadge(vuln.hasException, vuln.exceptionReason)}
                                                            </td>
                                                        </tr>
                                                    ))}
                                                </tbody>
                                            </table>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </>
            )}

            {/* Back to Home button */}
            <div className="row mt-4">
                <div className="col-12">
                    <a href="/" className="btn btn-secondary">
                        <i className="bi bi-house me-2"></i>
                        Back to Home
                    </a>
                </div>
            </div>
        </div>
    );
};

export default CrowdStrikeVulnerabilityLookup;
