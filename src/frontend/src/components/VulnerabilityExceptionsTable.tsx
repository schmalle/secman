/**
 * Vulnerability Exceptions Table Component
 *
 * Displays and manages vulnerability exceptions
 *
 * Features:
 * - List all exceptions with status
 * - Create new exceptions via modal
 * - Edit existing exceptions
 * - Delete exceptions with confirmation
 * - Status badges (Active/Expired)
 *
 * Related to: Feature 004-i-want-to (VULN Role & Vulnerability Management UI)
 */

import React, { useState, useEffect } from 'react';
import {
    getVulnerabilityExceptions,
    deleteException,
    type VulnerabilityException
} from '../services/vulnerabilityManagementService';
import VulnerabilityExceptionForm from './VulnerabilityExceptionForm';

const VulnerabilityExceptionsTable: React.FC = () => {
    const [exceptions, setExceptions] = useState<VulnerabilityException[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [showForm, setShowForm] = useState(false);
    const [editingException, setEditingException] = useState<VulnerabilityException | null>(null);

    useEffect(() => {
        fetchExceptions();
    }, []);

    const fetchExceptions = async () => {
        try {
            setLoading(true);
            const data = await getVulnerabilityExceptions();
            setExceptions(data);
            setError(null);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to fetch exceptions');
        } finally {
            setLoading(false);
        }
    };

    const handleDelete = async (id: number) => {
        if (!window.confirm('Are you sure you want to delete this exception?')) {
            return;
        }

        try {
            await deleteException(id);
            await fetchExceptions();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to delete exception');
        }
    };

    const handleCreateClick = () => {
        setEditingException(null);
        setShowForm(true);
    };

    const handleEditClick = (exception: VulnerabilityException) => {
        setEditingException(exception);
        setShowForm(true);
    };

    const handleFormSave = async () => {
        setShowForm(false);
        setEditingException(null);
        await fetchExceptions();
    };

    const handleFormCancel = () => {
        setShowForm(false);
        setEditingException(null);
    };

    const isExpired = (expirationDate: string): boolean => {
        return new Date(expirationDate) < new Date();
    };

    const getStatusBadge = (expirationDate: string) => {
        if (isExpired(expirationDate)) {
            return <span className="badge bg-danger">Expired</span>;
        }
        return <span className="badge bg-success">Active</span>;
    };

    if (loading) {
        return (
            <div className="d-flex justify-content-center p-5">
                <div className="spinner-border" role="status">
                    <span className="visually-hidden">Loading...</span>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container-fluid p-4">
                <div className="alert alert-danger" role="alert">
                    <i className="bi bi-exclamation-triangle me-2"></i>
                    {error}
                </div>
            </div>
        );
    }

    return (
        <div className="container-fluid p-4">
            <div className="row">
                <div className="col-12">
                    <div className="d-flex justify-content-between align-items-center mb-4">
                        <h2>
                            <i className="bi bi-x-circle me-2"></i>
                            Vulnerability Exceptions
                        </h2>
                        <button
                            className="btn btn-primary"
                            onClick={handleCreateClick}
                        >
                            <i className="bi bi-plus-lg me-2"></i>
                            Create Exception
                        </button>
                    </div>
                </div>
            </div>

            {/* Table */}
            <div className="row">
                <div className="col-12">
                    <div className="card">
                        <div className="card-body">
                            <h5 className="card-title">
                                Exceptions ({exceptions.length})
                            </h5>
                            {exceptions.length === 0 ? (
                                <p className="text-muted">
                                    No exceptions found. Click "Create Exception" to add one.
                                </p>
                            ) : (
                                <div className="table-responsive">
                                    <table className="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Type</th>
                                                <th>Target</th>
                                                <th>Affected</th>
                                                <th>Expiration</th>
                                                <th>Reason</th>
                                                <th>Created By</th>
                                                <th>Created At</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {exceptions.map((exception) => (
                                                <tr key={exception.id}>
                                                    <td>
                                                        <span className={`badge ${
                                                            exception.exceptionType === 'IP' ? 'bg-info' : 
                                                            exception.exceptionType === 'PRODUCT' ? 'bg-warning text-dark' :
                                                            'bg-secondary'
                                                        }`}>
                                                            {exception.exceptionType}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        {exception.exceptionType === 'ASSET' && exception.assetName ? (
                                                            <>
                                                                <i className="bi bi-server me-1"></i>
                                                                <strong>{exception.assetName}</strong>
                                                                <br />
                                                                <small className="text-muted">ID: {exception.assetId}</small>
                                                            </>
                                                        ) : (
                                                            <code>{exception.targetValue}</code>
                                                        )}
                                                    </td>
                                                    <td>
                                                        {exception.affectedVulnerabilityCount !== undefined && exception.affectedVulnerabilityCount !== null ? (
                                                            <span 
                                                                className={`badge ${
                                                                    exception.affectedVulnerabilityCount === 0 ? 'bg-secondary' :
                                                                    exception.affectedVulnerabilityCount < 10 ? 'bg-success' :
                                                                    exception.affectedVulnerabilityCount < 50 ? 'bg-warning text-dark' :
                                                                    'bg-danger'
                                                                }`}
                                                                title={`This exception affects ${exception.affectedVulnerabilityCount} vulnerabilities`}
                                                            >
                                                                {exception.affectedVulnerabilityCount} 
                                                                {exception.affectedVulnerabilityCount === 1 ? ' vuln' : ' vulns'}
                                                            </span>
                                                        ) : (
                                                            <span className="text-muted">
                                                                <i className="bi bi-dash"></i>
                                                            </span>
                                                        )}
                                                    </td>
                                                    <td>
                                                        {new Date(exception.expirationDate).toLocaleString()}
                                                    </td>
                                                    <td style={{ maxWidth: '300px', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                                                        {exception.reason}
                                                    </td>
                                                    <td>{exception.createdBy}</td>
                                                    <td>
                                                        {new Date(exception.createdAt).toLocaleDateString()}
                                                    </td>
                                                    <td>
                                                        {getStatusBadge(exception.expirationDate)}
                                                    </td>
                                                    <td>
                                                        <div className="btn-group" role="group">
                                                            <button
                                                                onClick={() => handleEditClick(exception)}
                                                                className="btn btn-sm btn-outline-primary"
                                                                title="Edit exception"
                                                            >
                                                                <i className="bi bi-pencil"></i>
                                                            </button>
                                                            <button
                                                                onClick={() => handleDelete(exception.id)}
                                                                className="btn btn-sm btn-outline-danger"
                                                                title="Delete exception"
                                                            >
                                                                <i className="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>

            {/* Back to Home button */}
            <div className="row mt-4">
                <div className="col-12">
                    <a href="/" className="btn btn-secondary">
                        <i className="bi bi-house me-2"></i>
                        Back to Home
                    </a>
                </div>
            </div>

            {/* Modal for Create/Edit Exception */}
            {showForm && (
                <div className="modal show d-block" tabIndex={-1} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
                    <div className="modal-dialog modal-dialog-centered">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h5 className="modal-title">
                                    {editingException ? 'Edit Exception' : 'Create Exception'}
                                </h5>
                                <button
                                    type="button"
                                    className="btn-close"
                                    onClick={handleFormCancel}
                                ></button>
                            </div>
                            <div className="modal-body">
                                <VulnerabilityExceptionForm
                                    exception={editingException || undefined}
                                    onSave={handleFormSave}
                                    onCancel={handleFormCancel}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default VulnerabilityExceptionsTable;
