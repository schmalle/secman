/**
 * React component for displaying vulnerability statistics grouped by asset type
 *
 * Displays grouped bar chart showing vulnerability counts by asset type with severity breakdowns.
 * Features:
 * - Chart.js grouped bar chart with severity datasets
 * - Bootstrap card wrapper with responsive design
 * - Color-coded severity levels matching severity distribution
 * - Data table showing counts and averages
 * - Loading, error, and empty states
 *
 * Feature: 036-vuln-stats-lense
 * Task: T041 [US3]
 * Spec reference: spec.md FR-007, FR-008
 * User Story: US3 - View Asset Vulnerability Statistics (P3)
 */

import React, { useEffect, useState } from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';
import { Bar } from 'react-chartjs-2';
import { vulnerabilityStatisticsApi, type VulnerabilityByAssetTypeDto } from '../../services/api/vulnerabilityStatisticsApi';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

/**
 * Color mapping for severity levels (matching SeverityDistributionChart)
 */
const SEVERITY_COLORS = {
  critical: '#dc3545',    // Bootstrap danger (red)
  high: '#fd7e14',        // Bootstrap warning (orange)
  medium: '#ffc107',      // Bootstrap warning (yellow)
  low: '#0dcaf0'          // Bootstrap info (cyan)
};

export default function VulnerabilityByAssetType() {
  const [data, setData] = useState<VulnerabilityByAssetTypeDto[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        const result = await vulnerabilityStatisticsApi.getVulnerabilitiesByAssetType();
        setData(result);
      } catch (err) {
        console.error('Error fetching vulnerabilities by asset type:', err);
        setError('Failed to load asset type statistics. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <p className="mt-3 text-muted">Loading asset type statistics...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="card">
        <div className="card-body">
          <div className="alert alert-danger" role="alert">
            <i className="bi bi-exclamation-triangle me-2"></i>
            {error}
          </div>
        </div>
      </div>
    );
  }

  // Empty state
  if (data.length === 0) {
    return (
      <div className="card">
        <div className="card-header">
          <h5 className="mb-0">
            <i className="bi bi-diagram-3 me-2"></i>
            Vulnerabilities by Asset Type
          </h5>
        </div>
        <div className="card-body text-center py-5">
          <i className="bi bi-inbox display-4 text-muted"></i>
          <p className="mt-3 text-muted">No asset type data available.</p>
        </div>
      </div>
    );
  }

  // Prepare chart data
  const chartData = {
    labels: data.map(d => d.assetType),
    datasets: [
      {
        label: 'Critical',
        data: data.map(d => d.criticalCount),
        backgroundColor: SEVERITY_COLORS.critical
      },
      {
        label: 'High',
        data: data.map(d => d.highCount),
        backgroundColor: SEVERITY_COLORS.high
      },
      {
        label: 'Medium',
        data: data.map(d => d.mediumCount),
        backgroundColor: SEVERITY_COLORS.medium
      },
      {
        label: 'Low',
        data: data.map(d => d.lowCount),
        backgroundColor: SEVERITY_COLORS.low
      }
    ]
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const
      },
      title: {
        display: false
      }
    },
    scales: {
      x: {
        stacked: false
      },
      y: {
        stacked: false,
        beginAtZero: true,
        title: {
          display: true,
          text: 'Vulnerability Count'
        }
      }
    }
  };

  return (
    <div className="card">
      <div className="card-header">
        <h5 className="mb-0">
          <i className="bi bi-diagram-3 me-2"></i>
          Vulnerabilities by Asset Type
        </h5>
      </div>
      <div className="card-body">
        {/* Chart */}
        <div style={{ height: '300px', marginBottom: '20px' }}>
          <Bar data={chartData} options={chartOptions} />
        </div>

        {/* Data table */}
        <div className="table-responsive">
          <table className="table table-sm">
            <thead>
              <tr>
                <th>Asset Type</th>
                <th className="text-end">Assets</th>
                <th className="text-end">Total Vulns</th>
                <th className="text-end">Avg/Asset</th>
              </tr>
            </thead>
            <tbody>
              {data.map((item) => (
                <tr key={item.assetType}>
                  <td><strong>{item.assetType}</strong></td>
                  <td className="text-end">{item.assetCount}</td>
                  <td className="text-end">{item.totalVulnerabilityCount}</td>
                  <td className="text-end">{item.averageVulnerabilitiesPerAsset.toFixed(1)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      <div className="card-footer text-muted small">
        <i className="bi bi-info-circle me-1"></i>
        Grouped bar chart showing vulnerability severity distribution across asset types.
      </div>
    </div>
  );
}
