openapi: 3.0.3
info:
  title: Secman MCP Server API
  description: Model Context Protocol server for Secman security requirement management
  version: 0.1.0
  contact:
    name: Secman MCP API
    url: http://localhost:8080/mcp/docs

servers:
  - url: http://localhost:8080
    description: Development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /api/mcp/capabilities:
    get:
      summary: Get MCP server capabilities
      description: Returns the capabilities and tools available from this MCP server
      tags:
        - MCP Protocol
      responses:
        '200':
          description: Server capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpCapabilities'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/mcp/session:
    post:
      summary: Initialize MCP session
      description: Create a new MCP session with authentication
      tags:
        - MCP Protocol
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionInitRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInitResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/mcp/session/{sessionId}:
    delete:
      summary: Close MCP session
      description: Terminate an active MCP session
      tags:
        - MCP Protocol
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Session identifier
      responses:
        '204':
          description: Session closed successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/mcp/tools/list:
    post:
      summary: List available tools
      description: Get list of MCP tools available to the authenticated client
      tags:
        - MCP Tools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpRequest'
      responses:
        '200':
          description: Available tools
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolListResponse'

  /api/mcp/tools/call:
    post:
      summary: Call MCP tool
      description: Execute an MCP tool with provided parameters
      tags:
        - MCP Tools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolCallRequest'
      responses:
        '200':
          description: Tool execution result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolCallResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/mcp/resources/list:
    post:
      summary: List available resources
      description: Get list of MCP resources (requirements, assessments) available to client
      tags:
        - MCP Resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpRequest'
      responses:
        '200':
          description: Available resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'

  /api/mcp/resources/read:
    post:
      summary: Read MCP resource
      description: Retrieve content of a specific MCP resource
      tags:
        - MCP Resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceReadRequest'
      responses:
        '200':
          description: Resource content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceReadResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/mcp/sse/{sessionId}:
    get:
      summary: MCP Server-Sent Events stream
      description: Establish SSE connection for real-time MCP communication
      tags:
        - MCP Protocol
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Active session identifier
      responses:
        '200':
          description: SSE stream established
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                event: mcp-message
                data: {"jsonrpc":"2.0","method":"notifications/tools/list_changed","params":{}}
        '404':
          $ref: '#/components/responses/NotFound'

  # API Key Management Endpoints
  /api/mcp/admin/api-keys:
    get:
      summary: List API keys
      description: Get user's MCP API keys
      tags:
        - API Key Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyListResponse'

    post:
      summary: Create API key
      description: Generate new MCP API key
      tags:
        - API Key Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'

  /api/mcp/admin/api-keys/{keyId}:
    put:
      summary: Update API key
      description: Modify API key settings
      tags:
        - API Key Management
      security:
        - BearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
      responses:
        '200':
          description: API key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'

    delete:
      summary: Delete API key
      description: Revoke and delete API key
      tags:
        - API Key Management
      security:
        - BearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: API key deleted

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-MCP-API-Key
      description: MCP API key for authentication
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for web UI authentication

  schemas:
    McpRequest:
      type: object
      required:
        - jsonrpc
        - id
        - method
      properties:
        jsonrpc:
          type: string
          enum: ["2.0"]
        id:
          type: string
          description: Request identifier
        method:
          type: string
          description: MCP method name
        params:
          type: object
          description: Method parameters

    McpResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          enum: ["2.0"]
        id:
          type: string
          description: Request identifier
        result:
          type: object
          description: Method result (if successful)
        error:
          $ref: '#/components/schemas/McpError'

    McpError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        data:
          type: object
          description: Additional error data

    McpCapabilities:
      type: object
      properties:
        tools:
          type: object
          description: Tool capabilities
        resources:
          type: object
          description: Resource capabilities
        prompts:
          type: object
          description: Prompt capabilities

    SessionInitRequest:
      type: object
      required:
        - capabilities
      properties:
        capabilities:
          $ref: '#/components/schemas/McpCapabilities'
        clientInfo:
          type: object
          properties:
            name:
              type: string
            version:
              type: string

    SessionInitResponse:
      type: object
      required:
        - sessionId
        - capabilities
      properties:
        sessionId:
          type: string
          description: Unique session identifier
        capabilities:
          $ref: '#/components/schemas/McpCapabilities'
        serverInfo:
          type: object
          properties:
            name:
              type: string
              example: "Secman MCP Server"
            version:
              type: string
              example: "0.1.0"

    ToolCallRequest:
      allOf:
        - $ref: '#/components/schemas/McpRequest'
        - type: object
          required:
            - params
          properties:
            method:
              enum: ["tools/call"]
            params:
              type: object
              required:
                - name
                - arguments
              properties:
                name:
                  type: string
                  description: Tool name
                arguments:
                  type: object
                  description: Tool arguments

    ToolCallResponse:
      allOf:
        - $ref: '#/components/schemas/McpResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                content:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: ["text", "image", "resource"]
                      text:
                        type: string
                      data:
                        type: string
                        format: base64
                      mimeType:
                        type: string
                isError:
                  type: boolean
                  default: false

    ToolListResponse:
      allOf:
        - $ref: '#/components/schemas/McpResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                tools:
                  type: array
                  items:
                    $ref: '#/components/schemas/McpTool'

    McpTool:
      type: object
      required:
        - name
        - description
        - inputSchema
      properties:
        name:
          type: string
          description: Tool name
        description:
          type: string
          description: Tool description
        inputSchema:
          type: object
          description: JSON Schema for tool input
        outputSchema:
          type: object
          description: JSON Schema for tool output

    ResourceListResponse:
      allOf:
        - $ref: '#/components/schemas/McpResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/McpResource'

    McpResource:
      type: object
      required:
        - uri
        - name
      properties:
        uri:
          type: string
          description: Resource URI
        name:
          type: string
          description: Resource name
        description:
          type: string
          description: Resource description
        mimeType:
          type: string
          description: Resource MIME type

    ResourceReadRequest:
      allOf:
        - $ref: '#/components/schemas/McpRequest'
        - type: object
          required:
            - params
          properties:
            method:
              enum: ["resources/read"]
            params:
              type: object
              required:
                - uri
              properties:
                uri:
                  type: string
                  description: Resource URI

    ResourceReadResponse:
      allOf:
        - $ref: '#/components/schemas/McpResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                contents:
                  type: array
                  items:
                    type: object
                    properties:
                      uri:
                        type: string
                      mimeType:
                        type: string
                      text:
                        type: string
                      blob:
                        type: string
                        format: base64

    # API Key Management Schemas
    CreateApiKeyRequest:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          description: Human-readable key name
        permissions:
          type: array
          items:
            type: string
            enum:
              - REQUIREMENTS_READ
              - REQUIREMENTS_WRITE
              - REQUIREMENTS_DELETE
              - ASSESSMENTS_READ
              - ASSESSMENTS_EXECUTE
              - FILES_READ
              - TRANSLATION_USE
              - AUDIT_READ
        expiresAt:
          type: string
          format: date-time
          description: Optional expiration date

    CreateApiKeyResponse:
      type: object
      required:
        - keyId
        - apiKey
        - name
        - permissions
        - createdAt
      properties:
        keyId:
          type: string
          description: Public key identifier
        apiKey:
          type: string
          description: Full API key (only shown once)
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    UpdateApiKeyRequest:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        expiresAt:
          type: string
          format: date-time

    ApiKeyResponse:
      type: object
      required:
        - keyId
        - name
        - permissions
        - isActive
        - createdAt
      properties:
        keyId:
          type: string
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastUsedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    ApiKeyListResponse:
      type: object
      required:
        - apiKeys
      properties:
        apiKeys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeyResponse'

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/McpError'

    Unauthorized:
      description: Authentication required or failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/McpError'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/McpError'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/McpError'