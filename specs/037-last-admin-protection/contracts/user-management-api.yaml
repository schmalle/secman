openapi: 3.0.3
info:
  title: User Management API - Last Admin Protection
  description: |
    Enhanced user management endpoints with last administrator protection.

    This contract extends existing user management endpoints to prevent deletion
    or role removal of the last ADMIN user, ensuring system administrative access
    is never lost.

    Feature: 037-last-admin-protection
  version: 1.0.0
  contact:
    name: Secman Development Team

servers:
  - url: http://localhost:8080/api
    description: Local development server
  - url: https://secman.example.com/api
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: User Management
    description: User CRUD operations with admin protection
  - name: User Validation
    description: User deletion and role change validation

paths:
  /users/{id}:
    delete:
      tags:
        - User Management
      summary: Delete a user
      description: |
        Delete a user by ID. This operation is protected against deleting the last
        ADMIN user to prevent system lockout.

        **Protection Rules:**
        - If user is the sole ADMIN, deletion is blocked (409 Conflict)
        - If user has other blocking references, deletion is blocked (400 Bad Request)
        - If user has 2+ admins exist, deletion proceeds normally (200 OK)

        **Authorization:** Requires ADMIN role
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to delete
          schema:
            type: integer
            format: int64
            example: 42
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '400':
          description: User has blocking references (demands, risk assessments, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                blockingReferences:
                  summary: User has blocking references
                  value:
                    error: Cannot delete user
                    message: "Cannot delete user due to existing references: 5 Demand(s) as requestor, 2 RiskAssessment(s) as assessor. Please reassign or remove these records first."
                    blockingReferences:
                      - entityType: Demand
                        count: 5
                        role: requestor
                        details: User is the requestor for 5 demand(s)
                      - entityType: RiskAssessment
                        count: 2
                        role: assessor
                        details: User is the assessor for 2 risk assessment(s)
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: User not found
        '409':
          description: Cannot delete last administrator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastAdminError'
              example:
                error: Cannot delete user
                message: "Cannot delete user due to system constraint: Cannot delete the last administrator. At least one ADMIN user must remain in the system."
                blockingReferences:
                  - entityType: SystemConstraint
                    count: 1
                    role: last_admin
                    details: Cannot delete the last administrator. At least one ADMIN user must remain in the system.
        '500':
          description: Server error during deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Failed to delete user: Database connection failed"
      security:
        - bearerAuth: []

    put:
      tags:
        - User Management
      summary: Update a user
      description: |
        Update user details including roles. This operation is protected against
        removing the ADMIN role from the last administrator.

        **Protection Rules:**
        - If user is sole ADMIN and ADMIN role is removed, update is blocked (409 Conflict)
        - If 2+ admins exist, ADMIN role can be removed normally (200 OK)
        - Other role changes are not restricted

        **Authorization:** Requires ADMIN role
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to update
          schema:
            type: integer
            format: int64
            example: 42
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              updateRoles:
                summary: Update user roles
                value:
                  roles:
                    - USER
                    - VULN
              updateEmail:
                summary: Update user email
                value:
                  email: newemail@example.com
              updateAll:
                summary: Update multiple fields
                value:
                  username: newusername
                  email: newemail@example.com
                  roles:
                    - USER
                    - ADMIN
                  workgroupIds:
                    - 1
                    - 3
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request (duplicate username/email, invalid role, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateUsername:
                  summary: Username already exists
                  value:
                    error: Username already exists
                invalidRole:
                  summary: Invalid role name
                  value:
                    error: "Invalid role: INVALIDROLE"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: User not found
        '409':
          description: Cannot remove ADMIN role from last administrator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastAdminError'
              example:
                error: Cannot update user
                message: "Cannot remove ADMIN role from the last administrator. At least one ADMIN user must remain in the system."
                blockingReferences:
                  - entityType: SystemConstraint
                    count: 1
                    role: last_admin
                    details: Cannot remove ADMIN role from the last administrator.
        '500':
          description: Server error during update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Failed to update user: Database connection failed"
      security:
        - bearerAuth: []

  /users/bulk-delete:
    post:
      tags:
        - User Management
      summary: Bulk delete users
      description: |
        Delete multiple users in a single atomic operation. This operation is protected
        against removing all ADMIN users.

        **Protection Rules:**
        - If deletion would remove all ADMINs, entire operation is blocked (409 Conflict)
        - If at least one ADMIN remains after deletion, operation proceeds (200 OK)
        - Operation is atomic: all deletions succeed or all fail

        **Authorization:** Requires ADMIN role

        **Note:** This endpoint does not exist yet but is included in the contract
        for completeness per spec FR-010.
      operationId: bulkDeleteUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  minItems: 1
                  description: Array of user IDs to delete
                  example: [10, 15, 23, 42]
      responses:
        '200':
          description: Users deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully deleted 4 users
                  deletedCount:
                    type: integer
                    example: 4
                  deletedIds:
                    type: array
                    items:
                      type: integer
                      format: int64
                    example: [10, 15, 23, 42]
        '400':
          description: Invalid request or users have blocking references
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Bulk deletion would remove all administrators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastAdminError'
              example:
                error: Cannot delete users
                message: "Bulk deletion would remove all ADMIN users. At least one ADMIN user must remain in the system. Affected admins: admin1, admin2, admin3"
                blockingReferences:
                  - entityType: SystemConstraint
                    count: 3
                    role: last_admin
                    details: Bulk deletion includes all 3 ADMIN users in the system
        '500':
          description: Server error during bulk deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /users/{id}/validate-deletion:
    get:
      tags:
        - User Validation
      summary: Validate if user can be deleted
      description: |
        Check if a user can be deleted without actually deleting them. Returns
        validation result with blocking references if deletion is not allowed.

        **Use Case:** UI can call this endpoint before showing delete confirmation
        to provide accurate feedback to the user.

        **Authorization:** Requires ADMIN role
      operationId: validateUserDeletion
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to validate
          schema:
            type: integer
            format: int64
            example: 42
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
              examples:
                canDelete:
                  summary: User can be deleted
                  value:
                    canDelete: true
                    blockingReferences: []
                    message: User can be safely deleted
                cannotDeleteLastAdmin:
                  summary: Cannot delete last admin
                  value:
                    canDelete: false
                    blockingReferences:
                      - entityType: SystemConstraint
                        count: 1
                        role: last_admin
                        details: Cannot delete the last administrator. At least one ADMIN user must remain in the system.
                    message: "Cannot delete user due to system constraint: Cannot delete the last administrator."
                cannotDeleteHasReferences:
                  summary: Cannot delete - has references
                  value:
                    canDelete: false
                    blockingReferences:
                      - entityType: Demand
                        count: 5
                        role: requestor
                        details: User is the requestor for 5 demand(s)
                    message: "Cannot delete user due to existing references: 5 Demand(s) as requestor."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

components:
  schemas:
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          minLength: 8
          format: password
          example: newSecurePassword123
        roles:
          type: array
          items:
            type: string
            enum:
              - USER
              - ADMIN
              - VULN
              - RELEASE_MANAGER
              - REQ
              - RISK
              - SECCHAMPION
          example:
            - USER
            - ADMIN
        workgroupIds:
          type: array
          items:
            type: integer
            format: int64
          example:
            - 1
            - 3
            - 5

    UserResponse:
      type: object
      required:
        - id
        - username
        - email
        - roles
      properties:
        id:
          type: integer
          format: int64
          example: 42
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        roles:
          type: array
          items:
            type: string
          example:
            - USER
            - ADMIN
        createdAt:
          type: string
          format: date-time
          example: "2025-10-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-31T14:22:00Z"
        workgroups:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WorkgroupSummary'
        workgroupCount:
          type: integer
          nullable: true
          example: 3

    WorkgroupSummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 5
        name:
          type: string
          example: Security Team

    ValidationResult:
      type: object
      required:
        - canDelete
        - blockingReferences
        - message
      properties:
        canDelete:
          type: boolean
          description: Whether the user can be safely deleted
          example: false
        blockingReferences:
          type: array
          items:
            $ref: '#/components/schemas/BlockingReference'
        message:
          type: string
          description: Human-readable validation message
          example: "Cannot delete user due to system constraint"

    BlockingReference:
      type: object
      required:
        - entityType
        - count
        - role
        - details
      properties:
        entityType:
          type: string
          description: Type of entity blocking deletion
          example: SystemConstraint
          enum:
            - Demand
            - RiskAssessment
            - Release
            - DemandClassificationRule
            - DemandClassificationResult
            - SystemConstraint
        count:
          type: integer
          description: Number of blocking references
          example: 1
        role:
          type: string
          description: Role the user plays in the blocking entity
          example: last_admin
        details:
          type: string
          description: Detailed explanation of the blocking reference
          example: Cannot delete the last administrator. At least one ADMIN user must remain in the system.

    ValidationError:
      type: object
      required:
        - error
        - message
        - blockingReferences
      properties:
        error:
          type: string
          example: Cannot delete user
        message:
          type: string
          example: "Cannot delete user due to existing references: 5 Demand(s) as requestor"
        blockingReferences:
          type: array
          items:
            $ref: '#/components/schemas/BlockingReference'

    LastAdminError:
      type: object
      required:
        - error
        - message
        - blockingReferences
      properties:
        error:
          type: string
          example: Cannot delete user
        message:
          type: string
          example: "Cannot delete user due to system constraint: Cannot delete the last administrator."
        blockingReferences:
          type: array
          items:
            $ref: '#/components/schemas/BlockingReference'
          minItems: 1

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: User not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /api/auth/login
